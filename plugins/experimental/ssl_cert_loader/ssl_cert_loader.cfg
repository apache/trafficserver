// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Describe how proxy should deal with the handshake process of SSL
// connections passing though.
version = "0.1";

// Once the certificate load table surpasses this limit
// Start evicting already loaded certificates
runtime-table-size = "10000";

// By default the proxy will participate in the handshake, so it needs
// to have a certificate that it uses to handshake with the client, and
// potentially another certificate to handshake with the origin server
// In this case, the config must specify both the matching traffic conditions
// and the connection attributes (certificates, tickets, etc).

// Alternatively the proxy could be directed to get out of the way and
// blind tunnel the SSL connection.  There are no options to set in this
// case.  Only specify the matching traffic.

// There are two rule lists.  One that matches on characteristics of the
// origin server.
// Another that matches on characteristics of the client.

// The attributes specified by matches in both rule lists will be used
// to process the connection.  If either rule list specifies a "tunnel" action
// the connection will be blind tunneled. If either rule specifies a "deny"
// action, the handshake processing will stop

// Each rule list  will be evaluated in order and stop on a match

ssl-server-match =
(
  { server-ip = "192.168.56.0-192.168.56.255";
    action="proxy"; /* Default if no action is specified */
    server-cert = "server1.pem";
    ssl-key-name = "privkey.pem";
    ssl-ticket-key-name = ( "ticket-key.blob", "ticket-key-old.blob" );
    child-match =
      // Doing something different for a couple servers in the range
      { server-ip = "192.168.56.45";
        server-cert = "server11.pem";
      },
      { server-ip = "192.168.56.46";
        server-cert = "server12.pem";
      },
    );
  },
  { server-name = "example.com";
    server-cert = "server2.pem";
    ssl-key-name = "privkey.pem";
  },
  {
    /* Could include characteristics of the offered ciphers in
       evaluating the actions */
    offered-cipher-constraint = {
      compare-op = "not-include";
      ciphers = ("3DES", "null");
    };
    server-cert = "server6.pem";
    ssl-key-name = "privkey.pem";
  },

  {
    /* Default, if no server-ip or server-name is specified,
       use the name in the certificate */
    server-name = "@";
    action="proxy";
    server-cert = "server3.pem";
    ssl-key-name = "privkey.pem";
  },
  {
    /* With the defaults, devolves to the base case of the
       ssl_multicert.config */
    server-cert = "server5.pem";
    ssl-key-name = "privkey.pem";
  },
  /* You can specify the SSL options (non matching state)
     in a separate entry and refer to it.  Anything specified
     directly in the match rule will override the ssl-options
  */
  { server-ip = "192.168.100.0-192.168.100.100";
    ssl-options = <ssl-actions.ssl-info-1>;
  },
  { server-ip = "192.168.110.0-192.168.110.100";
    ssl-options = <ssl-actions.ssl-info-1>;
  },
  { server-name = "*.yahoo.com";
    action="tunnel";
  },
  /* All other traffic should be blind tunneled */
  { server-ip = "0.0.0.0-255.255.255.255";
    action = "tunnel";
  }
);

ssl-client-match:
(
  // In all cases, use the same cipher-suites
  { use-client-cipher-suite = < cipher-suites.ecdhe >;
    child-match =
    (
      /* Traffic from lab should be blind tunneled */
      { client-ip = ("10.10.10.0-10.10.10.255", "10.10.50.152");
        action = "tunnel";
      }
      /* Clients from the office must use an authorized client certificate
         Proxy must verify.  Must specify cert to use with origin server */
      { client-ip = "10.10.20.0-10.10.20.255";
        client-cert = "valid";
        /* Specify, or rely on your system settings for cert verification */
        ssl-signer-cert-name = "signers.pem";
        client-cert-name = "client1.pem";
        priv-key-name = "client-priv-key.pem";
      },
      /* Clients from the other office are not yet set up with client
         certs.  But must provide client certs for the origin server */
      { client-ip = "10.10.30.0-10.10.30.255";
        /* Could be present or not, don't care, this is the default
           Other options are valid, present, or none
         */
        client-cert = "unknown";
        client-cert-name = "client1.pem";
        priv-key-name = "client-priv-key.pem";
      },
  }
);


ssl-actions  =
{
  ssl-info-1 = {
    server-cert = "server4.pem";
    ssl-key-name = "privkey.pem";
  };
};
