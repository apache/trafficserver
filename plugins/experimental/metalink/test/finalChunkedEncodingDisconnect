#!/usr/bin/env python

print '''1..1 finalChunkEncodingDisconnect
# The proxy forwards the final chunk even if the server disconnects immediately
# afterward'''

from twisted.internet import error, protocol, reactor, tcp
from twisted.web import http

def callback():
  print 'not ok 1 - No final chunk yet'

  reactor.stop()

reactor.callLater(2, callback)

class factory(http.HTTPFactory):
  class protocol(http.HTTPChannel):
    class requestFactory(http.Request):
      def requestReceived(ctx, method, target, version):

        ctx.client = None
        ctx.clientproto = version

        ctx.write('finalChunkedEncodingDisconnect')

        # If the proxy reads the final chunk before it sends the response
        # headers, it may send a Content-Length header vs. a chunked response
        def callback():
          try:
            ctx.finish()

          except RuntimeError:
            print 'not ok 1 - Did the proxy crash?  (The server connection closed.)'

            reactor.stop()

          else:
            ctx.transport.loseConnection()

        reactor.callLater(1, callback)

server = tcp.Port(0, factory())
server.startListening()

print '# Listening on {0}:{1}'.format(*server.socket.getsockname())

class factory(protocol.ClientFactory):
  def clientConnectionFailed(ctx, connector, reason):

    print 'Bail out!'
    reason.printTraceback()

    reactor.stop()

  class protocol(http.HTTPClient):
    def connectionLost(ctx, reason):
      try:
        reactor.stop()

      except error.ReactorNotRunning:
        pass

      else:
        print 'not ok 1 - Did the proxy crash?  (The client connection closed.)'

    connectionMade = lambda ctx: ctx.transport.write('GET {0}:{1} HTTP/1.1\r\n\r\n'.format(*server.socket.getsockname()))

    def handleHeader(ctx, k, v):
      if k.lower() == 'content-length':
        print 'not ok 1 - Got a Content-Length header vs. a chunked response'

        # No hope of a final chunk now
        reactor.stop()

    # Avoid calling undefined handleResponse() at the end of the content (if
    # the proxy sent a Content-Length header vs. a chunked response).
    # (Override connectionLost() when the proxy crashes or stop the reactor.)
    #
    # The data that was already received will be processed (the end of the
    # headers), then shutdown events will fire (connections will be closed),
    # and then finally the reactor will grind to a halt.
    def handleResponseEnd(ctx):
      pass

    def handleResponsePart(ctx, data):
      if data.endswith('0\r\n\r\n'):
        print 'ok 1 - Got the final chunk'

        reactor.stop()

tcp.Connector('localhost', 8080, factory(), 30, None, reactor).connect()

reactor.run()
