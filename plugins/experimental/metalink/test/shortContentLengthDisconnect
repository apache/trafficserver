#!/usr/bin/env python

print '''1..2 shortContentLengthDisconnect
# The proxy sends the right Content-Length header and closes the client
# connection if the server disconnects before the proxy sends the response
# headers'''

from twisted.internet import error, protocol, reactor, tcp
from twisted.web import http

def callback():
  print 'not ok 2 - The client was left hanging'

  reactor.stop()

reactor.callLater(1, callback)

class factory(http.HTTPFactory):
  class protocol(http.HTTPChannel):
    class requestFactory(http.Request):
      def requestReceived(ctx, method, target, version):

        ctx.client = None
        ctx.clientproto = version

        ctx.setHeader('Content-Length', 29)
        ctx.write('shortContentLengthDisconnect')

        # Disconnect before the proxy sends the response headers
        ctx.transport.loseConnection()

server = tcp.Port(0, factory())
server.startListening()

print '# Listening on {0}:{1}'.format(*server.socket.getsockname())

class factory(protocol.ClientFactory):
  def clientConnectionFailed(ctx, connector, reason):

    print 'Bail out!'
    reason.printTraceback()

    reactor.stop()

  class protocol(http.HTTPClient):
    def connectionLost(ctx, reason):
      try:
        reactor.stop()

      except error.ReactorNotRunning:
        pass

      else:
        print 'ok 2 - The client connection closed'

    connectionMade = lambda ctx: ctx.transport.write('GET {0}:{1} HTTP/1.1\r\n\r\n'.format(*server.socket.getsockname()))

    def handleHeader(ctx, k, v):
      if k.lower() == 'content-length':
        if v != '29':
          print 'not',

          # Who cares what happens now?
          reactor.stop()

        print 'ok 1 - Content-Length header'

    # Avoid calling undefined handleResponse() at the end of the content (if
    # the proxy sent the wrong Content-Length header).  (Override
    # connectionLost() when the proxy closes the client connection or stop the
    # reactor.)
    def handleResponseEnd(ctx):
      pass

tcp.Connector('localhost', 8080, factory(), 30, None, reactor).connect()

reactor.run()
