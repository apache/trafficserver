#!/usr/bin/env python

print '''1..1 longer
# The proxy doesn't choke if the server sends more content than it advertised'''

# Unlike the contentLength test, don't stop the reactor at the end of the
# headers.  Give the proxy time to choke.

from twisted.internet import error, protocol, reactor, tcp
from twisted.web import http

def callback():
  print 'not ok 1 - No Content-Length header'

  reactor.stop()

reactor.callLater(1, callback)

class factory(http.HTTPFactory):
  class protocol(http.HTTPChannel):
    class requestFactory(http.Request):
      def requestReceived(ctx, method, target, version):

        ctx.client = None
        ctx.clientproto = version

        ctx.setHeader('Content-Length', 1)
        ctx.write('longer')

server = tcp.Port(0, factory())
server.startListening()

print '# Listening on {0}:{1}'.format(*server.socket.getsockname())

class factory(protocol.ClientFactory):
  def clientConnectionFailed(ctx, connector, reason):

    print 'Bail out!'
    reason.printTraceback()

    reactor.stop()

  class protocol(http.HTTPClient):
    def connectionLost(ctx, reason):
      try:
        reactor.stop()

      except error.ReactorNotRunning:
        pass

      else:
        print 'not ok 1 - Did the proxy crash?  (The client connection closed.)'

    connectionMade = lambda ctx: ctx.transport.write('GET {0}:{1} HTTP/1.1\r\n\r\n'.format(*server.socket.getsockname()))

    def handleHeader(ctx, k, v):
      if k.lower() == 'content-length':
        if v != '1':
          print 'not',

        print 'ok 1 - Content-Length header'

        reactor.stop()

    # Avoid calling undefined handleResponse() at the end of the content.
    # (Override connectionLost() when the proxy crashes or stop the reactor.)
    #
    # The data that was already received will be processed (the end of the
    # headers), then shutdown events will fire (connections will be closed),
    # and then finally the reactor will grind to a halt.
    def handleResponseEnd(ctx):
      pass

tcp.Connector('localhost', 8080, factory(), 30, None, reactor).connect()

reactor.run()
