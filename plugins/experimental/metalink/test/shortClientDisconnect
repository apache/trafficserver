#!/usr/bin/env python

print '''1..1 shortClientDisconnect
# The proxy doesn't crash if the client disconnects before the proxy sends the
# response headers'''

from twisted.internet import error, protocol, reactor, tcp
from twisted.web import http

def callback():
  print 'not ok 1 - Why didn\'t the test finish yet?'

  reactor.stop()

reactor.callLater(3, callback)

class factory(http.HTTPFactory):
  class protocol(http.HTTPChannel):
    class requestFactory(http.Request):
      def requestReceived(ctx, method, target, version):

        ctx.client = None
        ctx.clientproto = version

        ctx.write('shortClientDisconnect0')

        def callback():
          ctx.write('shortClientDisconnect1')

          # Open another connection
          class factory(protocol.ClientFactory):
            def clientConnectionFailed(ctx, connector, reason):
              print 'not ok 1 - Did the proxy crash?  (Can\'t open another connection to it.)'

              reactor.stop()

            class protocol(protocol.Protocol):
              def connectionMade(ctx):
                print 'ok 1 - The proxy didn\'t crash (opened another connection to it)'

                reactor.stop()

          reactor.callLater(1, tcp.Connector('localhost', 8080, factory(), 30, None, reactor).connect)

        reactor.callLater(1, callback)

server = tcp.Port(0, factory())
server.startListening()

print '# Listening on {0}:{1}'.format(*server.socket.getsockname())

class factory(protocol.ClientFactory):
  def clientConnectionFailed(ctx, connector, reason):

    print 'Bail out!'
    reason.printTraceback()

    reactor.stop()

  class protocol(http.HTTPClient):
    def connectionMade(ctx):
      ctx.transport.write('GET {0}:{1} HTTP/1.1\r\n\r\n'.format(*server.socket.getsockname()))

      # Disconnect before the proxy sends the response headers
      ctx.transport.loseConnection()

    # Avoid calling undefined handleResponse() at the end of the content or
    # when the connection closes
    def handleResponseEnd(ctx):
      pass

tcp.Connector('localhost', 8080, factory(), 30, None, reactor).connect()

reactor.run()
