# 
msgid ""
msgstr ""
"Project-Id-Version: Apache Traffic Server 4.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-11-08 17:57+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../admin/hierachical-caching.en.rst:4
msgid "Hierarchical Caching"
msgstr ""

#: ../../admin/hierachical-caching.en.rst:28
msgid "Understanding Cache Hierarchies"
msgstr ""

#: ../../admin/hierachical-caching.en.rst:30
msgid ""
"A cache hierarchy consists of cache levels that communicate with each other."
" Traffic Server supports several types of cache hierarchies. All cache "
"hierarchies recognize the concept of **parent** and **child**. A parent "
"cache is a cache higher up in the hierarchy, to which Traffic Server can "
"forward requests. A child cache is a cache for which Traffic Server is a "
"parent."
msgstr ""

#: ../../admin/hierachical-caching.en.rst:37
msgid "Traffic Server supports the following hierarchical caching options:"
msgstr ""

#: ../../admin/hierachical-caching.en.rst:40
msgid "Parent Caching"
msgstr ""

#: ../../admin/hierachical-caching.en.rst:42
msgid ""
"If a Traffic Server node cannot find a requested object in its cache, then "
"it searches a parent cache (which itself can search other caches) before "
"finally retrieving the object from the origin server. You can configure a "
"Traffic Server node to use one or more parent caches so that if one parent "
"is unavailable, then another parent is availale to service requests. This is"
" called `Parent Failover`_. Traffic Server will support parent caching for "
"HTTP and HTTPS requests."
msgstr ""

#: ../../admin/hierachical-caching.en.rst:50
msgid ""
"**Note:** If you do not want all requests to go to the parent cache, then "
"simply configure Traffic Server to route certain requests (such as requests "
"containing specific URLs) directly to the origin server. SImply set parent "
"proxy rules in :file:`parent.config`"
msgstr ""

#: ../../admin/hierachical-caching.en.rst:55
msgid ""
"The figure below illustrates a simple cache hierarchy with a Traffic Server "
"node configured to use a parent cache. In the following scenario, a client "
"sends a request to a Traffic Server node that is a child in the cache "
"hierarchy (because it's configured to forward missed requests to a parent "
"cache). The request is a cache miss, so Traffic Server then forwards the "
"request to the parent cache, where it is a cache hit. The parent sends a "
"copy of the content to the Traffic Server, where it is cached and then "
"served to the client. Future requests for this content can now be served "
"directly from the Traffic Server cache (until the data is stale or expired)."
msgstr ""

#: ../../admin/hierachical-caching.en.rst:70
msgid "Parent caching"
msgstr ""

#: ../../admin/hierachical-caching.en.rst:72
msgid ""
"**Note:** If the request is a cache miss on the parent, then the parent "
"retrieves the content from the origin server (or from another cache, "
"depending on the parentâ€™s configuration). The parent caches the content and "
"then sends a copy to Traffic Server (its child), where it is cached and "
"served to the client."
msgstr ""

#: ../../admin/hierachical-caching.en.rst:79
msgid "Parent Failover"
msgstr ""

#: ../../admin/hierachical-caching.en.rst:81
msgid ""
"Traffic Server supports use of several parent caches. This ensures that if "
"one parent cache is not available, another parent cache can service client "
"requests."
msgstr ""

#: ../../admin/hierachical-caching.en.rst:85
msgid ""
"When you configure your Traffic Server to use more than one parent cache, "
"Traffic Server detects when a parent is not available and sends missed "
"requests to another parent cache. If you specify more than two parent "
"caches, then the order in which the parent caches are queried depends upon "
"the parent proxy rules configured in the file:`parent.config` configuration "
"file. By default, the parent caches are queried in the order they are listed"
" in the configuration file."
msgstr ""

#: ../../admin/hierachical-caching.en.rst:96
msgid "Configuring Traffic Server to Use a Parent Cache"
msgstr ""

#: ../../admin/hierachical-caching.en.rst:98
msgid ""
"To configure Traffic Server to use one or more parent caches, you must "
"complete the following steps:"
msgstr ""

#: ../../admin/hierachical-caching.en.rst:101
msgid "Enable the parent caching option."
msgstr ""

#: ../../admin/hierachical-caching.en.rst:102
msgid ""
"Identify the parent cache you want to use to service missed requests. To use"
" **parent failover**, you must identify more than one parent cache so that "
"when a parent cache is unavailable, requests are sent to another parent "
"cache."
msgstr ""

#: ../../admin/hierachical-caching.en.rst:107
msgid ""
"You need to configure the child cache only. No additional configuration is "
"needed for the Traffic Server parent cache."
msgstr ""

#: ../../admin/hierachical-caching.en.rst:109
msgid ""
"Configure Traffic Server to use a parent cache by editing the following "
"variable :ts:cv:`proxy.config.http.parent_proxy_routing_enable` in "
":file:`records.config` file."
msgstr ""

#: ../../admin/hierachical-caching.en.rst:112
msgid ""
"Edit the :file:`parent.config` file located in the Traffic Server ``config``"
" directory to set parent proxy rules to specify the parent cache to which "
"you want missed requests to be forwarded;"
msgstr ""

#: ../../admin/hierachical-caching.en.rst:116
msgid ""
"The following example configures Traffic Server to route all requests "
"containing the regular expression ``politics`` and the path ``/viewpoint`` "
"directly to the origin server (bypassing any parent hierarchies): ::"
msgstr ""

#: ../../admin/hierachical-caching.en.rst:123
msgid ""
"The following example configures Traffic Server to direct all missed "
"requests with URLs beginning with ``http://host1`` to the parent cache "
"``parent1``. If ``parent1`` cannot serve the requests, then requests are "
"forwarded to ``parent2``. Because ``round-robin=true``, Traffic Server goes "
"through the parent cache list in a round-robin based on client IP address.::"
msgstr ""

#: ../../admin/hierachical-caching.en.rst:132
msgid ""
"Run the command :option:`traffic_line -x` to apply the configuration "
"changes."
msgstr ""
