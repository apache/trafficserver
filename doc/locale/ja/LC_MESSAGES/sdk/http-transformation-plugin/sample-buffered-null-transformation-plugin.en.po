# 
msgid ""
msgstr ""
"Project-Id-Version: Apache Traffic Server 4.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-11-08 17:57+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../sdk/http-transformation-plugin/sample-buffered-null-transformation-plugin.en.rst:2
msgid "The Sample Buffered Null Transform Plugin"
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-buffered-null-transformation-plugin.en.rst:21
msgid ""
"The buffered null transform, ``bnull-transform.c``, reads the response "
"content into a buffer and then writes the full buffer out to the client. "
"Many examples of transformations, such as compression, require you to gather"
" the full response content in order to perform the transformation."
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-buffered-null-transformation-plugin.en.rst:26
msgid ""
"The buffered null transform uses a state variable to keep track of when it "
"is (a) reading data into the buffer and (b) writing the data from the buffer"
" to the downstream vconnection."
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-buffered-null-transformation-plugin.en.rst:30
msgid ""
"The following is a step-by-step walk through the buffered null transform:"
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-buffered-null-transformation-plugin.en.rst:33
msgid "Gets a handle to HTTP transactions."
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-buffered-null-transformation-plugin.en.rst:42
msgid ""
"With this ``TSPluginInit`` routine, the plugin is called back every time "
"Traffic Server reads a response header."
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-buffered-null-transformation-plugin.en.rst:45
msgid "Checks to see if the transaction response is transformable."
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-buffered-null-transformation-plugin.en.rst:57
msgid ""
"The default behavior for transformations is to cache the transformed content"
" (if desired, you also can tell Traffic Server to cache untransformed "
"content). Therefore, only responses received directly from an origin server "
"need to be transformed. Objects served from the cache are already "
"transformed. To determine whether the response is from the origin server, "
"the routine transformable checks the response header for the \"200 OK\" "
"server response."
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-buffered-null-transformation-plugin.en.rst:84
msgid ""
"If the response is transformable, then the plugin creates a transformation "
"vconnection that gets called back when the response data is ready to be "
"transformed (as it is streaming from the origin server)."
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-buffered-null-transformation-plugin.en.rst:98
msgid ""
"The previous code fragment shows that the handler function for the "
"transformation vconnection is ``bnull_transform``."
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-buffered-null-transformation-plugin.en.rst:101
msgid ""
"The ``bnull_transform`` function has to handle ``ERROR``, "
"``WRITE_COMPLETE``, ``WRITE_READY``, and ``IMMEDIATE`` events. If the "
"transform is just beginning, the event received is probably ``IMMEDIATE``. "
"The ``bnull_transform`` function calls ``handle_transform`` to handle "
"``WRITE_READY`` and ``IMMEDIATE``."
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-buffered-null-transformation-plugin.en.rst:107
msgid ""
"The ``handle_transform`` function examines the data parameter for the "
"continuation passed to it (the continuation passed to ``handle_transform`` "
"is the transformation vconnection). The data structure keeps track of two "
"states: copying the data into the buffer (``STATE_BUFFER_DATA``) and writing"
" the contents of the buffer to the output vconnection "
"(``STATE_OUTPUT_DATA``)."
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-buffered-null-transformation-plugin.en.rst:114
msgid ""
"Get a handle to the input VIO (see the ``handle_buffering`` function). "
"``input_vio = TSVConnWriteVIOGet (contp);`` This is so that the "
"transformation can get information about the upstream vconnection's write "
"operation to the input buffer."
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-buffered-null-transformation-plugin.en.rst:119
msgid ""
"Copy data from the input buffer to the output buffer. See the "
"``handle_buffering`` function for the following code fragment:"
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-buffered-null-transformation-plugin.en.rst:127
msgid ""
"Tell the input buffer that the transformation has read the data. See the "
"``handle_buffering`` function for the following code fragment:"
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-buffered-null-transformation-plugin.en.rst:134
msgid ""
"Modify the input VIO to tell it how much data has been read (increase the "
"value of ``ndone``). See the ``handle_buffering`` function for the following"
" code fragment:"
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-buffered-null-transformation-plugin.en.rst:142
msgid ""
"If there is more data left to read ( if ndone < nbytes), then the "
"``handle_buffering`` function wakes up the upstream vconnection by sending "
"it ``WRITE_READY``:"
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-buffered-null-transformation-plugin.en.rst:155
msgid ""
"The process of passing data through the transformation is illustrated in the"
" following diagram. The transformation sends ``WRITE_READY`` events when it "
"needs more data; when data is available, the upstream vconnection reenables "
"the transformation with an ``IMMEDIATE`` event."
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-buffered-null-transformation-plugin.en.rst:161
msgid "The following diagram illustrates the read from an input vconnection:"
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-buffered-null-transformation-plugin.en.rst:164
msgid ""
"**Reading Data Into the Buffer (the ``STATE_BUFFER_DATA`` State)** "
"{#ReadingDataIntoBuffer}"
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-buffered-null-transformation-plugin.en.rst:170
msgid "Reading Data Into the Buffer the STATE\\_BUFFER\\_DATA State"
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-buffered-null-transformation-plugin.en.rst:172
msgid ""
"When the data is read into the output buffer, the ``handle_buffering`` "
"function sets the state of the transformation's data structure to "
"``STATE_OUTPUT_DATA`` and calls the upstream vconnection back with the "
"``WRITE_COMPLETE`` event."
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-buffered-null-transformation-plugin.en.rst:183
msgid ""
"The upstream vconnection will probably shut down the write operation when it"
" receives the ``WRITE_COMPLETE`` event. The handler function of the "
"transformation, ``bnull_transform``, receives an ``IMMEDIATE`` event and "
"calls the ``handle_transform`` function. This time, the state is "
"``STATE_OUTPUT_DATA``, so ``handle_transform`` calls ``handle_output``."
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-buffered-null-transformation-plugin.en.rst:190
msgid ""
"The ``handle_output`` function gets a handle to the output vconnection: "
"``output_conn = TSTransformOutputVConnGet (contp);``"
msgstr ""

#: ../../sdk/http-transformation-plugin/sample-buffered-null-transformation-plugin.en.rst:193
msgid ""
"The ``handle_output`` function writes the buffer to the output vconnection:"
msgstr ""
