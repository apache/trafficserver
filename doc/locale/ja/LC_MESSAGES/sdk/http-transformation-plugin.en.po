# 
msgid ""
msgstr ""
"Project-Id-Version: Apache Traffic Server 4.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-11-08 17:57+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../sdk/http-transformation-plugin.en.rst:4
msgid "HTTP Transformation Plugins"
msgstr ""

#: ../../sdk/http-transformation-plugin.en.rst:23
msgid ""
"Transform plugins examine or transform HTTP message body content. For "
"example, transform plugins can:"
msgstr ""

#: ../../sdk/http-transformation-plugin.en.rst:26
msgid "Append text to HTML documents"
msgstr ""

#: ../../sdk/http-transformation-plugin.en.rst:28
msgid "Compress images"
msgstr ""

#: ../../sdk/http-transformation-plugin.en.rst:30
msgid "Do virus checking (on client ``POST`` data or server response data)"
msgstr ""

#: ../../sdk/http-transformation-plugin.en.rst:32
msgid ""
"Do content-based filtering (filter out HTML documents that contain certain "
"terms or expressions)"
msgstr ""

#: ../../sdk/http-transformation-plugin.en.rst:35
msgid ""
"This chapter explains how to write transform plugins. The following examples"
" are discussed in detail:"
msgstr ""

#: ../../sdk/http-transformation-plugin.en.rst:46
msgid "Writing Content Transform Plugins"
msgstr ""

#: ../../sdk/http-transformation-plugin.en.rst:48
msgid ""
"Content transformation plugins transform HTTP response content (such as "
"images or HTML documents) and HTTP request content (such as client ``POST`` "
"data). Because the data stream to be transformed is of variable length, "
"these plugins must use a mechanism that passes data from buffer to buffer "
"*and* checks to see if the end of the data stream is reached. This mechanism"
" is provided by virtual connections (``VConnection``\\ s) and virtual IO "
"descriptors (``VIO``\\ s)."
msgstr ""

#: ../../sdk/http-transformation-plugin.en.rst:56
msgid ""
"A ``VConnection`` is an abstraction for a data pipe that allows its users to"
" perform asynchronous reads and writes without knowing the underlying "
"implementation. A transformation is a specific type of ``VConnection``. A "
"**transformation** connects an input data source and an output data sink; "
"this feature enables it to view and modify all the data passing through it."
msgstr ""

#: ../../sdk/http-transformation-plugin.en.rst:63
msgid ""
"Transformations can be chained together, one after the other, so that "
"multiple transformations can be performed on the same content. The "
"``VConnection`` type, ``TSVConn``, is actually a subclass of ``TSCont``, "
"which means that ``VConnection``\\ s (and transformations) are "
"continuations. ``VConnection``\\ s and transformations can thus exchange "
"events, informing one another that data is available for reading or writing,"
" or that the end of a data stream is reached."
msgstr ""

#: ../../sdk/http-transformation-plugin.en.rst:71
msgid ""
"A ``VIO`` is a description of an IO operation that is in progress. Every "
"``VConnection`` has an associated *input VIO* and an associated *output "
"VIO*. When ``VConnection``\\ s are transferring data to one another, one "
"``VConnection``'s input ``VIO`` is another ``VConnection``'s output ``VIO``."
" A ``VConnection``'s input ``VIO`` is also called its **write ``VIO``** "
"because the input ``VIO`` refers to a write operation performed on the "
"``VConnection`` itself. Similarly, the outpt ``VIO`` is also called the "
"**read ``VIO``**. For transformations, which are designed to pass data in "
"one direction, you can picture the relationship between the transformation "
"``VConnection`` and its ``VIO``\\ s as follows:"
msgstr ""

#: ../../sdk/http-transformation-plugin.en.rst:83
msgid "**Transformation and its ``VIO``\\ s** {#TransformationAndVIOs}"
msgstr ""

#: ../../sdk/http-transformation-plugin.en.rst:88
msgid "A Transformation and its VIOs"
msgstr ""

#: ../../sdk/http-transformation-plugin.en.rst:90
msgid ""
"Because the Traffic Server API places transformations directly in the "
"response or request data stream, the transformation ``VConnection`` is "
"responsible only for reading the data from the input buffer, transforming "
"it, and then writing it to the output buffer. The upstream ``VConnection`` "
"writes the incoming data to the transformation's input buffer. In the figure"
" above, `A Transformation and its ``VIO``\\ s <#TransformationAndVIOs>`__, "
"the input ``VIO`` describes the progress of the upstream ``VConnection``'s "
"write operation on the transformation, while the output ``VIO`` describes "
"the progress of the transformation's write operation on the output "
"(downstream) ``VConnection``. The **nbytes** value in the ``VIO`` is the "
"total number of bytes to be written. The **ndone** value is the current "
"progress, or the number of bytes that have been written at a specific point "
"in time."
msgstr ""

#: ../../sdk/http-transformation-plugin.en.rst:104
msgid ""
"When writing a transformation plugin, you must understand implementation as "
"well as the use of ``VConnection``\\ s. The *implementor's side* refers to "
"how to implement a ``VConnection`` that others can use. At minimum, a "
"transform plugin creates a transformation that sits in the data stream and "
"must be able to handle the events that the upstream and downstream "
"``VConnection``\\ s send to it. The *user's side* refers to how to use a "
"``VConnection`` to read or write data. At the very least, transformations "
"output (write) data."
msgstr ""

#: ../../sdk/http-transformation-plugin.en.rst:114
msgid "Transformations"
msgstr ""

#: ../../sdk/http-transformation-plugin.en.rst:117
msgid "VIOs"
msgstr ""

#: ../../sdk/http-transformation-plugin.en.rst:119
msgid ""
"A ``VIO``*or virtual IO is a description of an in progress IO operation. The"
" ``VIO`` data structure is used by ``VConnection`` users to determine how "
"much progress has been made on a particular IO operation, and to reenable an"
" IO operation when it stalls due to buffer space. ``VConnection`` "
"implementors use ``VIO``\\ s to determine the buffer for an IO operation, "
"how much work to do on the IO operation, and which continuation to call back"
" when progress on the IO operation is made."
msgstr ""

#: ../../sdk/http-transformation-plugin.en.rst:128
msgid ""
"The ``TSVIO`` data structure itself is opaque, but it might have been "
"defined as follows:"
msgstr ""

#: ../../sdk/http-transformation-plugin.en.rst:143
msgid "IO Buffers"
msgstr ""

#: ../../sdk/http-transformation-plugin.en.rst:145
msgid ""
"The **IO buffer** data structure is the building block of the "
"``VConnection`` abstraction. An IO buffer is composed of a list of buffer "
"blocks which, in turn, point to buffer data. Both the *buffer block* "
"(``TSIOBufferBlock``) and *buffer data* (``TSIOBufferData``) data structures"
" are reference counted so they can reside in multiple buffers at the same "
"time. This makes it extremely efficient to copy data from one IO buffer to "
"another using ``TSIOBufferCopy``, since Traffic Server only needs to copy "
"pointers and adjust reference counts appropriately (instead of actually "
"copying any data)."
msgstr ""

#: ../../sdk/http-transformation-plugin.en.rst:155
msgid ""
"The IO buffer abstraction provides for a single writer and multiple readers."
" In order for the readers to have no knowledge of each other, they "
"manipulate IO buffers through the\\ ``TSIOBufferReader`` data structure. "
"Since only a single writer is allowed, there is no corresponding "
"``TSIOBufferWriter`` data structure. The writer simply modifies the IO "
"buffer directly."
msgstr ""
