# 
msgid ""
msgstr ""
"Project-Id-Version: Apache Traffic Server 4.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-11-08 17:57+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../sdk/remap-plugin/example-query-remap.en.rst:2
msgid "Example: Query Remap Plugin"
msgstr ""

#: ../../sdk/remap-plugin/example-query-remap.en.rst:21
msgid ""
"The sample remap plugin, ``query_remap.c``, maps client requests to a number"
" of servers based on a hash of the request's URL query parameter. This can "
"be useful for spreading load for a given type of request among backend "
"servers, while still maintaining \"stickiness\" to a single server for "
"similar requests. For example, a search engine may want to send repeated "
"queries for the same keywords to a server that has likely cached the result "
"from a prior query."
msgstr ""

#: ../../sdk/remap-plugin/example-query-remap.en.rst:30
msgid "Configuration of query\\_remap"
msgstr ""

#: ../../sdk/remap-plugin/example-query-remap.en.rst:32
msgid ""
"The query remap plugin will allow the query parameter name to be specified, "
"along with the hostnames of the servers to hash across. Sample "
"``remap.config`` rules using ``query_remap`` will look like:"
msgstr ""

#: ../../sdk/remap-plugin/example-query-remap.en.rst:41
msgid ""
"The first ``@pparam`` specifies the query param key for which the value will"
" be hashed. The remaining parameters list the hostnames of the servers. A "
"request for ``http://www.example.com/search?q=apache`` will match the first "
"rule. The plugin will look for the *``q``* parameter and hash the value "
"'``apache``\\ ' to pick from among ``srch_[1-3]_.example.com`` to send the "
"request."
msgstr ""

#: ../../sdk/remap-plugin/example-query-remap.en.rst:48
msgid ""
"If the request does not include a *``q``* query parameter and the plugin "
"decides not to modify the request, the default toURL "
"'``http://srch1.example.com/search``\\ ' will be used by TS."
msgstr ""

#: ../../sdk/remap-plugin/example-query-remap.en.rst:52
msgid ""
"The parameters are passed to the plugin's ``tsremap_new_instance`` function."
" In ``query_remap``, ``tsremap_new_instance`` creates a plugin-defined "
"``query_remap_info`` struct to store its configuration parameters. The "
"ihandle, an opaque pointer that can be used to pass per-instance data, is "
"set to this struct pointer and will be passed to the ``tsremap_remap`` "
"function when it is triggered for a request."
msgstr ""

#: ../../sdk/remap-plugin/example-query-remap.en.rst:87
msgid ""
"Another way remap plugins may want handle more complex configuration is to "
"specify a configuration filename as a ``pparam`` and parse the specified "
"file during instance initialization."
msgstr ""

#: ../../sdk/remap-plugin/example-query-remap.en.rst:92
msgid "Performing the Remap"
msgstr ""

#: ../../sdk/remap-plugin/example-query-remap.en.rst:94
msgid ""
"The plugin implements the ``tsremap_remap`` function, which is called when "
"TS has read the client HTTP request headers and matched the request to a "
"remap rule configured for the plugin. The ``TSRemapRequestInfo`` struct "
"contains input and output members for the remap operation."
msgstr ""

#: ../../sdk/remap-plugin/example-query-remap.en.rst:99
msgid ""
"``tsremap_remap`` uses the configuration information passed via the "
"``ihandle`` and checks the ``request_query`` for the configured query "
"parameter. If the parameter is found, the plugin sets a ``new_host`` to "
"modify the request host:"
msgstr ""
