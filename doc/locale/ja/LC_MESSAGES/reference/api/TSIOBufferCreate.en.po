# 
msgid ""
msgstr ""
"Project-Id-Version: Apache Traffic Server 4.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-11-08 17:57+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../reference/api/TSIOBufferCreate.en.rst:22
msgid "TSIOBufferCreate"
msgstr ""

#: ../../reference/api/TSIOBufferCreate.en.rst:25
msgid "Synopsis"
msgstr ""

#: ../../reference/api/TSIOBufferCreate.en.rst:26
msgid "`#include <ts/ts.h>`"
msgstr ""

#: ../../reference/api/TSIOBufferCreate.en.rst:37
msgid "Description"
msgstr ""

#: ../../reference/api/TSIOBufferCreate.en.rst:39
msgid ""
"The :type:`TSIOBuffer` data structure is the building block of the TSVConn "
"abstraction. An IO buffer is composed of a list of buffer blocks which are "
"reference counted so that they can reside in multiple buffers at the same "
"time. This makes it extremely efficient to copy data from one IO buffer to "
"another using :func:`TSIOBufferCopy` since Traffic Server only needs to copy"
" pointers and adjust reference counts appropriately and not actually copy "
"any data; however applications should still strive to ensure data blocks are"
" a reasonable size."
msgstr ""

#: ../../reference/api/TSIOBufferCreate.en.rst:48
msgid ""
"The IO buffer abstraction provides for a single writer and multiple readers."
" In order for the readers to have no knowledge of each other, they "
"manipulate IO buffers through the :type:`TSIOBufferReader` data structure. "
"Since only a single writer is allowed, there is no corresponding "
":type:`TSIOBufferWriter` data structure. The writer simply modifies the IO "
"buffer directly."
msgstr ""

#: ../../reference/api/TSIOBufferCreate.en.rst:55
msgid ":func:`TSIOBufferCreate` creates an empty :type:`TSIOBuffer`."
msgstr ""

#: ../../reference/api/TSIOBufferCreate.en.rst:57
msgid ""
":func:`TSIOBufferSizedCreate` creates an empty :type:`TSIOBuffer` with an "
"initial capacity of index bytes."
msgstr ""

#: ../../reference/api/TSIOBufferCreate.en.rst:60
msgid ""
":func:`TSIOBufferDestroy` destroys the IO buffer bufp. Since multiple IO "
"buffers can share data, this does not necessarily free all of the data "
"associated with the IO buffer but simply decrements the appropriate "
"reference counts."
msgstr ""

#: ../../reference/api/TSIOBufferCreate.en.rst:64
msgid ""
":func:`TSIOBufferWrite` appends length bytes from the buffer buf to the IO "
"buffer bufp and returns the number of bytes successfully written into the IO"
" buffer."
msgstr ""

#: ../../reference/api/TSIOBufferCreate.en.rst:68
msgid ""
":func:`TSIOBufferProduce` makes nbytes of data available for reading in the "
"IO buffer bufp. A common pattern for writing to an IO buffer is to copy data"
" into a buffer block and then call INKIOBufferProduce to make the new data "
"visible to any readers."
msgstr ""

#: ../../reference/api/TSIOBufferCreate.en.rst:73
msgid ""
"The watermark of an TSIOBuffer is the minimum number of bytes of data that "
"have to be in the buffer before calling back any continuation that has "
"initiated a read operation on this buffer. As a writer feeds data into the "
"TSIOBuffer, no readers are called back until the amount of data reaches the "
"watermark. Setting a watermark can improve performance because it avoids "
"frequent callbacks to read small amounts of data. "
":func:`TSIOBufferWaterMarkGet` gets the current watermark for the IO buffer "
"bufp."
msgstr ""

#: ../../reference/api/TSIOBufferCreate.en.rst:82
msgid ""
":func:`TSIOBufferWaterMarkSet` gets the current watermark for the IO buffer "
"bufp to water_mark bytes."
msgstr ""

#: ../../reference/api/TSIOBufferCreate.en.rst:86
msgid "See also"
msgstr ""

#: ../../reference/api/TSIOBufferCreate.en.rst:88
msgid ":manpage:`TSAPI(3ts)`, :manpage:`TSIOBufferReaderAlloc(3ts)`"
msgstr ""
