#
msgid ""
msgstr ""
"Project-Id-Version: Apache Traffic Server 4.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-11-08 17:57+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../reference/api/TSUrlCreate.en.rst:22
msgid "TSUrlCreate"
msgstr ""

#: ../../reference/api/TSUrlCreate.en.rst:25
msgid "Synopsis"
msgstr ""

#: ../../reference/api/TSUrlCreate.en.rst:27
msgid "`#include <ts/ts.h>`"
msgstr ""

#: ../../reference/api/TSUrlCreate.en.rst:35
msgid "Description"
msgstr ""

#: ../../reference/api/TSUrlCreate.en.rst:78
msgid "See also"
msgstr ""

#: ../../reference/api/TSUrlCreate.en.rst:37
msgid ""
"The URL data structure is a parsed version of a standard internet URL. The "
"Traffic Server URL API provides access to URL data stored in marshal "
"buffers. The URL functions can create, copy, retrieve or delete entire "
"URLs, and retrieve or modify parts of URLs, such as their host, port or "
"scheme information."
msgstr ""

#: ../../reference/api/TSUrlCreate.en.rst:43
msgid ""
":func:`TSUrlCreate` creates a new URL within the marshal buffer :data:"
"`bufp`. Release the resulting handle with a call to :func:"
"`TSHandleMLocRelease`."
msgstr ""

#: ../../reference/api/TSUrlCreate.en.rst:47
msgid ""
":func:`TSUrlClone` copies the contents of the URL at location :data:"
"`src_url` within the marshal buffer :data:`src_bufp` to a location within "
"the marshal buffer :data:`dest_bufp`. Release the returned handle with a "
"call to :func:`TSHandleMLocRelease`."
msgstr ""

#: ../../reference/api/TSUrlCreate.en.rst:52
msgid ""
":func:`TSUrlCopy` copies the contents of the URL at location :data:"
"`src_url` within the marshal buffer :data:`src_bufp` to the location :data:"
"`dest_url` within the marshal buffer dest_bufp. :func:`TSUrlCopy` works "
"correctly even if :data:`src_bufp` and :data:`dest_bufp` point to different "
"marshal buffers. It is important for the destination URL (its marshal "
"buffer and :type:`TSMLoc`) to have been created before copying into it."
msgstr ""

#: ../../reference/api/TSUrlCreate.en.rst:59
msgid ""
":func:`TSUrlParse` parses a URL. The :data:`start` pointer is both an input "
"and an output parameter and marks the start of the URL to be parsed. After "
"a successful parse, the :data:`start` pointer equals the :data:`end` "
"pointer. The :data:`end` pointer must be one byte after the last character "
"you want to parse. The URL parsing routine assumes that everything between :"
"data:`start` and :data:`end` is part of the URL. It is up to higher level "
"parsing routines, such as :func:`TSHttpHdrParseReq`, to determine the "
"actual end of the URL."
msgstr ""

#: ../../reference/api/TSUrlCreate.en.rst:69
msgid "Return values"
msgstr ""

#: ../../reference/api/TSUrlCreate.en.rst:71
msgid ""
"The :func:`TSUrlParse` function returns a :type:`TSParseResult`, where :"
"data:`TS_PARSE_ERROR` indicates an error. Success is indicated by one of :"
"data:`TS_PARSE_DONE`, :data:`TS_PARSE_OK` or :data:`TS_PARSE_CONT`. The "
"other APIs all return a :type:`TSReturnCode`, indicating success (:data:"
"`TS_SUCCESS`) or failure (:data:`TS_ERROR`) of the operation."
msgstr ""

#: ../../reference/api/TSUrlCreate.en.rst:80
msgid ""
":manpage:`TSAPI(3ts)`, :manpage:`TSMBufferCreate(3ts)`, :manpage:"
"`TSUrlHostGet(3ts)`, :manpage:`TSUrlHostSet(3ts)`, :manpage:"
"`TSUrlStringGet(3ts)`, :manpage:`TSUrlPercentEncode(3ts)`"
msgstr ""
