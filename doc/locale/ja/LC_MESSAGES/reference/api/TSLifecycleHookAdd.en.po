#
msgid ""
msgstr ""
"Project-Id-Version: Apache Traffic Server 4.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-11-08 17:57+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../reference/api/TSLifecycleHookAdd.en.rst:24
msgid "TSLifecycleHookAdd"
msgstr "TSLifecycleHookAdd"

#: ../../reference/api/TSLifecycleHookAdd.en.rst:27
msgid "Synopsis"
msgstr "概要"

#: ../../reference/api/TSLifecycleHookAdd.en.rst:28
msgid "`#include <ts/ts.h>`"
msgstr "`#include <ts/ts.h>`"

#: ../../reference/api/TSLifecycleHookAdd.en.rst:33
msgid "Description"
msgstr "解説"

#: ../../reference/api/TSLifecycleHookAdd.en.rst:35
msgid ""
":func:`TSLifecycleHookAdd` adds :arg:`contp` to the list of lifecycle hooks "
"specified by :arg:`id`. Lifecycle hooks are based on the Traffic Server "
"process, not on any specific transaction or session. These will typically "
"be called only once during the execution of the Traffic Server process and "
"therefore should be added in :func:`TSPluginInit` (which could itself be "
"considered a lifecyle hook). Unlike other hooks, lifecycle hooks may not "
"have a well defined ordering and use of them should not assume that one of "
"the hooks is always called before another unless specifically mentioned."
msgstr ""
":func:`TSLifecycleHookAdd` は :arg:`contp` を :arg:`id` で指定されるライフサ"
"イクルフックのリストに追加します。ライフサイクルフックは特定のトランザクショ"
"ンやセッションではなく Traffic Server プロセスのもとに成り立ちます。これらは"
"一般的に Traffic Server プロセスの実行中に一度だけ呼び出されるので、( それ自"
"体もライフサイクルフックとみなされる ) :func:`TSPluginInit` の中で追加される"
"べきです。他のフックと違い、ライフサイクルフックは明確な順序を持たず、使用に"
"あたっては特に言及されていない限りフックのうちの一つが常に他のどれかより前に"
"呼び出されると仮定すべきではありません。"

#: ../../reference/api/TSLifecycleHookAdd.en.rst:45
msgid "`TS_LIFECYCLE_PORTS_INITIALIZED_HOOK`"
msgstr "`TS_LIFECYCLE_PORTS_INITIALIZED_HOOK`"

#: ../../reference/api/TSLifecycleHookAdd.en.rst:40
msgid ""
"Called after the :ts:cv:`proxy server port <proxy.config.http."
"server_ports>` data structures have been initialized but before connections "
"are accepted on those ports. The sockets corresponding to the ports may or "
"may not be open depending on how the :program:`traffic_server` process was "
"invoked. Other API functions that depend on server ports should be called "
"from this hook and not :func:`TSPluginInit`."
msgstr ""
":ts:cv:`プロキシーサーバーポート <proxy.config.http.server_ports>` データ構"
"造が初期化された後、接続がそれらのポート上で accept される前に呼ばれます。"
"ポートに対応するソケットは :program:`traffic_server` プロセスがどのように起"
"動されたかによって open されることもされないこともあります。サーバーポートに"
"依存するその他の API 関数は :func:`TSPluginInit` ではなくこのフックから呼ば"
"れるべきです。"

#: ../../reference/api/TSLifecycleHookAdd.en.rst:45
msgid ""
"Invoked with the event `TS_EVENT_LIFECYCLE_PORTS_INITIALIZED` and `NULL` "
"data."
msgstr ""
"`TS_EVENT_LIFECYCLE_PORTS_INITIALIZED` イベントと `NULL` データとともに呼び"
"出されます。"

#: ../../reference/api/TSLifecycleHookAdd.en.rst:53
msgid "`TS_LIFECYCLE_PORTS_READY_HOOK`"
msgstr "`TS_LIFECYCLE_PORTS_READY_HOOK`"

#: ../../reference/api/TSLifecycleHookAdd.en.rst:48
msgid ""
"Called after enabling connections on the proxy server ports. Because "
"Traffic Server is threaded this may or may not be called before any "
"connections are accepted. The hook code may assume that any connection to "
"Traffic Server started after this hook is called will be accepted by "
"Traffic Server, making this a convenient place to signal external processes "
"of that."
msgstr ""
"プロキシーサーバーポート上での接続の有効化の後に呼ばれます。Traffic Server "
"はスレッドで動作するので、接続を受け付ける前に呼ばれることも、そうでないこと"
"もあります。フックコードはこのフックが呼ばれた後に開始された Traffic Server "
"に対する接続が Traffic Server によって accept されると仮定し、そのことを外部"
"プロセスに通知する便利な場所とできます。"

#: ../../reference/api/TSLifecycleHookAdd.en.rst:53
msgid ""
"Invoked with the event `TS_EVENT_LIFECYCLE_PORTS_READY` and `NULL` data."
msgstr ""
"`TS_EVENT_LIFECYCLE_PORTS_READY` イベントと `NULL` データとともに呼び出され"
"ます。"

#: ../../reference/api/TSLifecycleHookAdd.en.rst:58
msgid "`TS_LIFECYCLE_CACHE_READY_HOOK`"
msgstr "`TS_LIFECYCLE_CACHE_READY_HOOK`"

#: ../../reference/api/TSLifecycleHookAdd.en.rst:56
msgid "Called after Traffic Server cache initialization has finished."
msgstr "Traffic Server のキャッシュの初期化が完了した後に呼ばれます。"

#: ../../reference/api/TSLifecycleHookAdd.en.rst:58
msgid ""
"Invoked with the event `TS_EVENT_LIFECYCLE_CACHE_READY` and `NULL` data."
msgstr ""
"`TS_EVENT_LIFECYCLE_CACHE_READY` イベントと `NULL` データとともに呼び出され"
"ます。"

#: ../../reference/api/TSLifecycleHookAdd.en.rst:61
msgid "Ordering"
msgstr "順番"

#: ../../reference/api/TSLifecycleHookAdd.en.rst:63
msgid ""
"`TS_LIFECYCLE_PORTS_INITIALIZED_HOOK` will always be called before "
"`TS_LIFECYCLE_PORTS_READY_HOOK`."
msgstr ""
"`TS_LIFECYCLE_PORTS_INITIALIZED_HOOK` は常に "
"`TS_LIFECYCLE_PORTS_READY_HOOK` の前に呼び出されます。"

#: ../../reference/api/TSLifecycleHookAdd.en.rst:66
msgid "Examples"
msgstr "例"

#: ../../reference/api/TSLifecycleHookAdd.en.rst:68
msgid ""
"The following example demonstrates how to correctly use :func:"
"`TSNetAcceptNamedProtocol`, which requires the proxy ports to be "
"initialized and therefore does not work if called from :func:`TSPluginInit` "
"directly. ::"
msgstr ""
"次の例は :func:`TSNetAcceptNamedProtocol` を正しく使用する方法、つまりプロキ"
"シーポートが初期化され :func:`TSPluginInit` から直接呼び出された場合に動作し"
"ないようにする方法を説明しています。"

#: ../../reference/api/TSLifecycleHookAdd.en.rst:100
msgid "History"
msgstr "歴史"

#: ../../reference/api/TSLifecycleHookAdd.en.rst:102
msgid ""
"Lifecycle hooks were introduced to solve process initialization ordering "
"issues (`TS-1487 <https://issues.apache.org/jira/browse/TS-1487>`_). "
"Different API calls required different modules of Traffic Server to be "
"initialized for the call to work, but others did not work that late in "
"initialization, which was problematic because all of them could effectively "
"only be called from :func:`TSPluginInit` . The solution was to move :func:"
"`TSPluginInit` as early as possible in the process initialization and "
"provide hooks for API calls that needed to be invoked later which served "
"essentially as additional pluging initialization points."
msgstr ""
"ライフサイクルフックはプロセスの初期化順の課題を解決するために登場しました "
"(`TS-1487 <https://issues.apache.org/jira/browse/TS-1487>`_) 。異なる API の"
"呼び出しは Traffic Server の異なるモジュールが初期化されることを要求していま"
"したが、初期化の終盤のものは動作せず、事実上 :func:`TSPluginInit` からのみ呼"
"び出すことが可能だったので問題となっていました。その解決方法は :func:"
"`TSPluginInit` をプロセスの初期化の可能な限り早い位置に移し、本来は追加のプ"
"ラグイン初期化ポイントとして提供され後で呼び出される必要のあった API 呼び出"
"しのためにフックを提供することでした。"

#: ../../reference/api/TSLifecycleHookAdd.en.rst:108
msgid "See also"
msgstr "参考"

#: ../../reference/api/TSLifecycleHookAdd.en.rst:109
msgid ":manpage:`TSAPI(3ts)`, :manpage:`TSContCreate(3ts)`"
msgstr ":manpage:`TSAPI(3ts)` 、\\ :manpage:`TSContCreate(3ts)`"
