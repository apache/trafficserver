# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
msgid ""
msgstr ""
"Project-Id-Version: Apache Traffic Server 6.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-01-02 21:32+0000\n"
"PO-Revision-Date: 2016-01-03 15:48+0900\n"
"Language: en\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.1.1\n"
"Last-Translator: \n"
"Language-Team: \n"
"X-Generator: Poedit 1.8.6\n"

#: ../../developer-guide/api/functions/TSmalloc.en.rst:41
msgid "Description"
msgstr "解説"

#: ../../developer-guide/api/functions/TSmalloc.en.rst:28
msgid "Synopsis"
msgstr "概要"

#: ../../developer-guide/api/functions/TSmalloc.en.rst:23
msgid "TSmalloc"
msgstr "TSmalloc"

#: ../../developer-guide/api/functions/TSmalloc.en.rst:25
msgid "Traffic Server memory allocation API."
msgstr ""

#: ../../developer-guide/api/functions/TSmalloc.en.rst:43
msgid ""
"Traffic Server provides a number of routines for allocating and freeing "
"memory. These routines correspond to similar routines in the C library. For "
"example, :func:`TSrealloc` behaves like the C library routine :func:"
"`realloc`. There are two reasons to use the routines provided by Traffic "
"Server. The first is portability. The Traffic Server API routines behave "
"the same on all of Traffic Servers supported platforms. For example, :func:"
"`realloc` does not accept an argument of ``NULL`` on some platforms. The "
"second reason is that the Traffic Server routines actually track the memory "
"allocations by file and line number. This tracking is very efficient, is "
"always turned on, and is useful for tracking down memory leaks."
msgstr ""
"Traffic Server はメモリの割り当てと解放のための多数のルーチンを提供します。"
"これらのルーチンは C ライブラリの似たものに対応します。例えば、:func:"
"`TSrealloc` は C ライブラリルーチンの :func:`realloc` のように振る舞います。"
"Traffic Server によって提供されるルーチンを使う理由は二つあります。一つ目は"
"移植性です。Traffic Server API ルーチンは Traffic Server が対応するすべての"
"プラットフォーム上で同様に振る舞います。例えば、:func:`realloc` はいくつかの"
"プラットフォームで ``NULL`` の引数を受け付けません。二つ目の理由は Traffic "
"Server ルーチンが実はファイルと行番号でメモリの割り当てを追跡していることで"
"す。この追跡はとても優れており、常に有効化され、メモリーリークを探し出すのに"
"便利です。"

#: ../../developer-guide/api/functions/TSmalloc.en.rst:30
msgid "`#include <ts/ts.h>`"
msgstr "`#include <ts/ts.h>`"

#: ../../developer-guide/api/functions/TSmalloc.en.rst:77
msgid ""
":func:`TSfree` releases the memory allocated by :func:`TSmalloc` or :func:"
"`TSrealloc`. If ptr is ``NULL``, :func:`TSfree` does no operation."
msgstr ""
":func:`TSfree` は :func:`TSmalloc` または :func:`TSrealloc` によって割り当て"
"られたメモリーを解放します。ptr が ``NULL`` の場合、:func:`TSfree` は何も行"
"いません。"

#: ../../developer-guide/api/functions/TSmalloc.en.rst:54
msgid ""
":func:`TSmalloc` returns a pointer to size bytes of memory allocated from "
"the heap. Traffic Server uses :func:`TSmalloc` internally for memory "
"allocations. Always use :func:`TSfree` to release memory allocated by :func:"
"`TSmalloc`; do not use :func:`free`."
msgstr ""
":func:`TSmalloc` はヒープに割り当てられた size バイトのメモリを指すポイン"
"ターを返します。Traffic Server メモリ割り当てのために内部で :func:"
"`TSmalloc` を使用します。:func:`TSmalloc` で割り当てられたメモリーを解放する"
"には常に :func:`TSfree` を使用し、:func:`free` は使用しないでください。"

#: ../../developer-guide/api/functions/TSmalloc.en.rst:59
msgid ""
":func:`TSstrdup` returns a pointer to a new string that is a duplicate of "
"the string pointed to by str. The memory for the new string is allocated "
"using :func:`TSmalloc` and should be freed by a call to :func:`TSfree`.  :"
"func:`TSstrndup` returns a pointer to a new string that is a duplicate of "
"the string pointed to by str and size bytes long. The new string will be "
"NUL-terminated. This API is very useful for transforming non NUL-terminated "
"string values returned by APIs such as :func:`TSMimeHdrFieldValueStringGet` "
"into NUL-terminated string values. The memory for the new string is "
"allocated using :func:`TSmalloc` and should be freed by a call to :func:"
"`TSfree`."
msgstr ""
":func:`TSstrdup` は str で指し示された文字列を複製した新しい文字列を指すポイ"
"ンターを返します。新しい文字列のメモリーは :func:`TSmalloc` を使用して割り当"
"てられ、:func:`TSfree` の呼び出しに酔って解放されるべきです。:func:"
"`TSstrndup` は size バイトの長さの str で指し示された文字列を複製した新しい"
"文字列を指すポインターを返します。新しい文字列は NUL 終端されます。この API "
"は :func:`TSMimeHdrFieldValueStringGet` などによって返された非 NUL 終端文字"
"列値を NUL 終端文字列値に変換するのにとても便利です。新しい文字列のメモリー"
"は :func:`TSmalloc` を使用して割り当てられ、:func:`TSfree` の呼び出しに酔っ"
"て解放されるべきです。"

#: ../../developer-guide/api/functions/TSmalloc.en.rst:73
msgid ""
":func:`TSstrlcat` appends the NUL-terminated string src to the end of dst. "
"It will append at most size - strlen(dst) - 1 bytes, NUL-terminating the "
"result."
msgstr ""
":func:`TSstrlcat` は NUL 終端文字列 src を dst の終わりに追加します。これは"
"最大で size - strlen(dst) - 1 を追加し、結果を NUL 終端します。"

#: ../../developer-guide/api/functions/TSmalloc.en.rst:70
msgid ""
":func:`TSstrlcpy` copies up to size - 1 characters from the NUL-terminated "
"string src to dst, NUL-terminating the result."
msgstr ""
":func:`TSstrlcpy` は NUL 終端文字列 src から dst に size - 1 文字までコピー"
"し、結果を NUL 終端します。`"

#: ../../developer-guide/api/functions/TSmalloc.en.rst:83
msgid ":manpage:`TSAPI(3ts)`"
msgstr ":manpage:`TSAPI(3ts)`"

#: ../../developer-guide/api/functions/TSmalloc.en.rst:81
msgid "See also"
msgstr "参考"
