# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Apache Traffic Server 6.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-01-02 21:32+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.1.1\n"

#: ../../developer-guide/architecture/ram-cache.en.rst:65
msgid "16 byte unique object identifier"
msgstr ""

#: ../../developer-guide/architecture/ram-cache.en.rst:156
msgid "173 MB/sec"
msgstr ""

#: ../../developer-guide/architecture/ram-cache.en.rst:158
msgid "234 MB/sec"
msgstr ""

#: ../../developer-guide/architecture/ram-cache.en.rst:160
msgid "3 MB/sec"
msgstr ""

#: ../../developer-guide/architecture/ram-cache.en.rst:156
msgid "442 MB/sec"
msgstr ""

#: ../../developer-guide/architecture/ram-cache.en.rst:160
msgid "50 MB/sec"
msgstr ""

#: ../../developer-guide/architecture/ram-cache.en.rst:158
msgid "55 MB/sec"
msgstr ""

#: ../../developer-guide/architecture/ram-cache.en.rst:66
msgid ""
"8 bytes worth of version number (in our system, the block in the "
"partition). When the version of an object changes old entries are purged "
"from the cache."
msgstr ""

#: ../../developer-guide/architecture/ram-cache.en.rst:122
msgid ""
"A new object must be enough bytes worth of currently cached objects to "
"cover itself. Each time an object is considered for replacement the CLOCK "
"moves forward. If the History object has a greater value then it is "
"inserted into the Cached List and the replaced objects are removed from "
"memory and their list entries are inserted into the History List. If the "
"History object has a lesser value it is reinserted into the History List. "
"Objects considered for replacement (at least one) but not replaced have "
"their ``hits`` field set to ``0`` and are reinserted into the Cached List. "
"This is the CLOCK operation on the Cached List."
msgstr ""

#: ../../developer-guide/architecture/ram-cache.en.rst:158
#, python-format
msgid "Almost free, particularly decompression; ~37% final size."
msgstr ""

#: ../../developer-guide/architecture/ram-cache.en.rst:34
msgid ""
"Balances Recentness, Frequency and Size to maximize hit rate (not byte hit "
"rate)."
msgstr ""

#: ../../developer-guide/architecture/ram-cache.en.rst:156
#, python-format
msgid ""
"Basically free since disk or network will limit first; ~53% final size."
msgstr ""

#: ../../developer-guide/architecture/ram-cache.en.rst:108
msgid "Cached List"
msgstr ""

#: ../../developer-guide/architecture/ram-cache.en.rst:73
msgid "Compressed length of the object."
msgstr ""

#: ../../developer-guide/architecture/ram-cache.en.rst:154
msgid "Decompression Rate"
msgstr ""

#: ../../developer-guide/architecture/ram-cache.en.rst:154
msgid "Compression Rate"
msgstr ""

#: ../../developer-guide/architecture/ram-cache.en.rst:140
msgid "Compression and Decompression"
msgstr ""

#: ../../developer-guide/architecture/ram-cache.en.rst:142
msgid ""
"Compression is performed by a background operation (currently called as "
"part of Put) which maintains a pointer into the Cached List and runs toward "
"the head compressing entries. Decompression occurs on demand during a Get. "
"In the case of objects tagged ``copy``, the compressed version is "
"reinserted in the LRU since we need to make a copy anyway. Those not tagged "
"``copy`` are inserted uncompressed in the hope that they can be reused in "
"uncompressed form. This is a compile time option and may be something we "
"want to change."
msgstr ""

#: ../../developer-guide/architecture/ram-cache.en.rst:74
msgid ""
"Compression type, or ``none`` if no compression. Possible types are: "
"*fastlz*, *libz*, and *liblzma*."
msgstr ""

#: ../../developer-guide/architecture/ram-cache.en.rst:63
msgid "Description"
msgstr "解説"

#: ../../developer-guide/architecture/ram-cache.en.rst:134
msgid ""
"Each CLOCK, the least recently used entry in the History List is dequeued "
"and if the ``hits`` field is not greater than ``1`` (it was hit at least "
"once in the History or Cached List) it is deleted. Otherwise, the ``hits`` "
"is set to ``0`` and it is requeued on the History List."
msgstr ""

#: ../../developer-guide/architecture/ram-cache.en.rst:76
msgid ""
"Flag indicating that content cannot be compressed (true), or that it mat be "
"compressed (false)."
msgstr ""

#: ../../developer-guide/architecture/ram-cache.en.rst:81
msgid "HASH link"
msgstr ""

#: ../../developer-guide/architecture/ram-cache.en.rst:47
msgid ""
"Has relatively low memory overhead of approximately 200 bytes per object in "
"memory."
msgstr ""

#: ../../developer-guide/architecture/ram-cache.en.rst:43
msgid ""
"Has very low CPU overhead, only slightly more than a basic LRU. Rather than "
"using an O(lg n) heap, it uses a probabilistic replacement policy for O(1) "
"cost with low C."
msgstr ""

#: ../../developer-guide/architecture/ram-cache.en.rst:132
msgid "History List"
msgstr ""

#: ../../developer-guide/architecture/ram-cache.en.rst:37
msgid ""
"Is Scan Resistant and extracts robust hit rates even when the working set "
"does not fit in the RAM Cache."
msgstr ""

#: ../../developer-guide/architecture/ram-cache.en.rst:80
msgid "LRU link"
msgstr ""

#: ../../developer-guide/architecture/ram-cache.en.rst:71
msgid ""
"Length of the object, which differs from *size* because of compression and "
"padding)."
msgstr ""

#: ../../developer-guide/architecture/ram-cache.en.rst:154
msgid "Method"
msgstr ""

#: ../../developer-guide/architecture/ram-cache.en.rst:27
msgid "New RAM Cache Algorithm (CLFUS)"
msgstr ""

#: ../../developer-guide/architecture/ram-cache.en.rst:154
msgid "Notes"
msgstr ""

#: ../../developer-guide/architecture/ram-cache.en.rst:69
msgid "Number of hits within this clock period."
msgstr ""

#: ../../developer-guide/architecture/ram-cache.en.rst:24
msgid "RAM Cache"
msgstr ""

#: ../../developer-guide/architecture/ram-cache.en.rst:91
msgid "Seen Hash"
msgstr ""

#: ../../developer-guide/architecture/ram-cache.en.rst:82
msgid "Smart point to the data buffer."
msgstr ""

#: ../../developer-guide/architecture/ram-cache.en.rst:40
msgid ""
"Supports compression at 3 levels: fastlz, gzip (libz), and xz (liblzma). "
"Compression can be moved to another thread."
msgstr ""

#: ../../developer-guide/architecture/ram-cache.en.rst:54
msgid ""
"The RAM Cache consists of an object hash fronting 2 LRU/CLOCK lists and a "
"*seen* hash table. The first cached list contains objects in memory, while "
"the second contains a history of objects which have either recently been in "
"memory or are being considered for keeping in memory. The *seen* hash table "
"is used to make the algorithm scan resistant."
msgstr ""

#: ../../developer-guide/architecture/ram-cache.en.rst:85
msgid ""
"The interface to the cache is *Get* and *Put* operations. Get operations "
"check if an object is in the cache and are called on a read attempt. The "
"Put operation decides whether or not to cache the provided object in "
"memory. It is called after a read from secondary storage."
msgstr ""

#: ../../developer-guide/architecture/ram-cache.en.rst:160
#, python-format
msgid "Expensive; ~27% final size."
msgstr ""

#: ../../developer-guide/architecture/ram-cache.en.rst:82
msgid "IOBufferData"
msgstr ""

#: ../../developer-guide/architecture/ram-cache.en.rst:110
msgid ""
"The *Cached List* contains objects actually in memory. The basic operation "
"is LRU with new entries inserted into a FIFO queue and hits causing objects "
"to be reinserted. The interesting bit comes when an object is being "
"considered for insertion. A check is first made against the Object Hash to "
"see if the object is in the Cached List or History. Hits result in updating "
"the ``hit`` field and reinsertion of the object. History hits result in the "
"``hit`` field being updated and a comparison to see if this object should "
"be kept in memory. The comparison is against the least recently used "
"members of the Cache List, and is based on a weighted frequency::"
msgstr ""

#: ../../developer-guide/architecture/ram-cache.en.rst:93
msgid ""
"The *Seen List* becomes active after the *Cached* and *History* lists "
"become full following a cold start. The purpose is to make the cache scan "
"resistant, which means that the cache state must not be affected at all by "
"a long sequence Get and Put operations on objects which are seen only once. "
"This is essential, and without it not only would the cache be polluted, but "
"it could lose critical information about the objects that it cares about. "
"It is therefore essential that the Cache and History lists are not affected "
"by Get or Put operations on objects seen the first time. The Seen Hash "
"maintains a set of 16 bit hash tags, and requests which do not hit in the "
"object cache (are in the Cache List or History List) and do not match the "
"hash tag result in the hash tag being updated but are otherwise ignored. "
"The Seen Hash is sized to approximately the number of objects in the cache "
"in order to match the number that are passed through it with the CLOCK rate "
"of the Cached and History Lists."
msgstr ""

#: ../../developer-guide/architecture/ram-cache.en.rst:60
msgid "The list entries record the following information:"
msgstr ""

#: ../../developer-guide/architecture/ram-cache.en.rst:29
msgid ""
"The new RAM Cache uses ideas from a number of cache replacement policies "
"and algorithms, including LRU, LFU, CLOCK, GDFS and 2Q, called CLFUS "
"(Clocked Least Frequently Used by Size). It avoids any patented algorithms "
"and includes the following features:"
msgstr ""

#: ../../developer-guide/architecture/ram-cache.en.rst:50
msgid ""
"The rationale for emphasizing hit rate over byte hit rate is that the "
"overhead of pulling more bytes from secondary storage is low compared to "
"the cost of a request."
msgstr ""

#: ../../developer-guide/architecture/ram-cache.en.rst:150
msgid ""
"There are 3 algorithms and levels of compression (speed on an Intel i7 920 "
"series processor using one thread):"
msgstr ""

#: ../../developer-guide/architecture/ram-cache.en.rst:63
msgid "Value"
msgstr "値"

#: ../../developer-guide/architecture/ram-cache.en.rst:163
#, python-format
msgid ""
"These are ballpark numbers, and your millage will vary enormously. JPEG, "
"for example, will not compress with any of these (or at least will only do "
"so at such a marginal level that the cost of compression and decompression "
"is wholly unjustified), and the same is true of many other media and binary "
"file types which embed some form of compression. The RAM Cache does detect "
"compression level and will declare something *incompressible* if it doesn't "
"get below 90% of the original size. This value is cached so that the RAM "
"Cache will not attempt to compress it again (at least as long as it is in "
"the history)."
msgstr ""

#: ../../developer-guide/architecture/ram-cache.en.rst:78
msgid ""
"Whether or not this object should be copied in and copied out (e.g. HTTP "
"HDR)."
msgstr ""

#: ../../developer-guide/architecture/ram-cache.en.rst:66
msgid "auxkeys"
msgstr ""

#: ../../developer-guide/architecture/ram-cache.en.rst:74
msgid "compressed"
msgstr ""

#: ../../developer-guide/architecture/ram-cache.en.rst:73
msgid "compressed_len"
msgstr ""

#: ../../developer-guide/architecture/ram-cache.en.rst:78
msgid "copy"
msgstr ""

#: ../../developer-guide/architecture/ram-cache.en.rst:156
msgid "fastlz"
msgstr ""

#: ../../developer-guide/architecture/ram-cache.en.rst:69
msgid "hits"
msgstr ""

#: ../../developer-guide/architecture/ram-cache.en.rst:65
msgid "key"
msgstr ""

#: ../../developer-guide/architecture/ram-cache.en.rst:71
msgid "len"
msgstr ""

#: ../../developer-guide/architecture/ram-cache.en.rst:160
msgid "liblzma"
msgstr ""

#: ../../developer-guide/architecture/ram-cache.en.rst:158
msgid "libz"
msgstr ""

#: ../../developer-guide/architecture/ram-cache.en.rst:70
msgid "size"
msgstr "size"

#: ../../developer-guide/architecture/ram-cache.en.rst:70
msgid "size of the object in the cache."
msgstr ""

#: ../../developer-guide/architecture/ram-cache.en.rst:76
msgid "uncompressible"
msgstr ""
