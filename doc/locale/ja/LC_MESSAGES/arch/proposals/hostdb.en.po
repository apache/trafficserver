# 
msgid ""
msgstr ""
"Project-Id-Version: Apache Traffic Server 4.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-11-08 17:57+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../arch/proposals/hostdb.en.rst:2
msgid "Host Resolution"
msgstr ""

#: ../../arch/proposals/hostdb.en.rst:22
msgid "Introduction"
msgstr ""

#: ../../arch/proposals/hostdb.en.rst:24
msgid ""
"The current mechanism for resolving host names to IP addresses for Traffic "
"Server is contained the HostDB and DNS libraries. These take hostnames and "
"provide IP addresses for them."
msgstr ""

#: ../../arch/proposals/hostdb.en.rst:27
msgid ""
"The current implementation is generally considered inadequate, both from a "
"functionality point of view and difficulty in working with it in other parts"
" of Traffic Server. As Traffic Server is used in more complex situtations "
"this inadequacy presents increasing problems."
msgstr ""

#: ../../arch/proposals/hostdb.en.rst:32
msgid "Goals"
msgstr ""

#: ../../arch/proposals/hostdb.en.rst:34
msgid ""
"Updating the host name resolution (currently referred to as \"HostDB\") has "
"several functions goals"
msgstr ""

#: ../../arch/proposals/hostdb.en.rst:36
msgid "Enable additional processing layers to be easily added."
msgstr ""

#: ../../arch/proposals/hostdb.en.rst:37
msgid "Enable plugins to directly access the name resolution logic"
msgstr ""

#: ../../arch/proposals/hostdb.en.rst:38
msgid "Enable plugins to provide name resolution"
msgstr ""

#: ../../arch/proposals/hostdb.en.rst:39
msgid "Asynchronous (immediate resolve or callback on block)"
msgstr ""

#: ../../arch/proposals/hostdb.en.rst:40
msgid ""
"Minimize allocations -- in particular no allocations for cached resolutions"
msgstr ""

#: ../../arch/proposals/hostdb.en.rst:41
msgid ""
"Simplify interactions with the resolution, particularly with regard to "
"nameservers, origin server failover, and address family handling."
msgstr ""

#: ../../arch/proposals/hostdb.en.rst:44
msgid ""
"It is also necessary to support a number of specific features that are "
"either currently available or strongly desired."
msgstr ""

#: ../../arch/proposals/hostdb.en.rst:46
msgid "SplitDNS or its equivalent"
msgstr ""

#: ../../arch/proposals/hostdb.en.rst:47
msgid "Use of a hosts file (e.g. ``/etc/hosts``)"
msgstr ""

#: ../../arch/proposals/hostdb.en.rst:48
msgid "Simultaneous IPv4 and IPv6 queries"
msgstr ""

#: ../../arch/proposals/hostdb.en.rst:49
msgid "IP family control"
msgstr ""

#: ../../arch/proposals/hostdb.en.rst:50
msgid ""
"Negative caching *  Server connection failures *  Query failures *  "
"Nameserver failures."
msgstr ""

#: ../../arch/proposals/hostdb.en.rst:54
msgid "Address validity time out control"
msgstr ""

#: ../../arch/proposals/hostdb.en.rst:55
msgid "Address round robin support"
msgstr ""

#: ../../arch/proposals/hostdb.en.rst:56
msgid "SRV record support (weighted records)"
msgstr ""

#: ../../arch/proposals/hostdb.en.rst:57
msgid "Nameserver round robin"
msgstr ""

#: ../../arch/proposals/hostdb.en.rst:58
msgid "Plugin access to nameserver data (add, remove, enumerate)"
msgstr ""

#: ../../arch/proposals/hostdb.en.rst:59
msgid "Plugin provision of resolvers."
msgstr ""

#: ../../arch/proposals/hostdb.en.rst:60
msgid "Hooks for plugin detection / recovery from resolution events."
msgstr ""

#: ../../arch/proposals/hostdb.en.rst:62
msgid ""
"One issue is persistence of the cached resolutions. This creates problems "
"for the current implementation (because of size limits it imposes on the "
"cached data) but also allows for quicker restarts in a busy environment."
msgstr ""

#: ../../arch/proposals/hostdb.en.rst:66
msgid "Basics"
msgstr ""

#: ../../arch/proposals/hostdb.en.rst:68
msgid ""
"The basic design is to separate the functionality into chainable layers so "
"that a resolver with the desired attributes can be assembled from those "
"layers. The core interface is that of a lazy iterator. This object returns "
"one of four results when asked for an address"
msgstr ""

#: ../../arch/proposals/hostdb.en.rst:72
msgid "An IP address"
msgstr ""

#: ../../arch/proposals/hostdb.en.rst:73
msgid "Done(no more addresses are available)"
msgstr ""

#: ../../arch/proposals/hostdb.en.rst:74
msgid "Wait(an address may be available in the future)"
msgstr ""

#: ../../arch/proposals/hostdb.en.rst:75
msgid "Fail (no address is available and none will be so in the future)"
msgstr ""

#: ../../arch/proposals/hostdb.en.rst:77
msgid ""
"Each layer (except the bottom) uses this API and also provides it. This "
"enables higher level logic such as the state machine to simply use the "
"resolver as a list without having to backtrack states in the case of "
"failures, or have special cases for different resolution sources."
msgstr ""

#: ../../arch/proposals/hostdb.en.rst:81
msgid ""
"To perform a resolution, a client creates a query object (potentially on the"
" stack), initializes it with the required data (at least the hostname) and "
"then starts the resolution. Methods on the query object allow its state and "
"IP address data to be accessed."
msgstr ""

#: ../../arch/proposals/hostdb.en.rst:86
msgid "Required Resolvers"
msgstr ""

#: ../../arch/proposals/hostdb.en.rst:90
msgid "Nameserver"
msgstr ""

#: ../../arch/proposals/hostdb.en.rst:89
msgid ""
"A bottom level resolver that directly queries a nameserver for DNS data. "
"This contains much of the functionality currently in the ``iocore/dns`` "
"directory."
msgstr ""

#: ../../arch/proposals/hostdb.en.rst:94
msgid "SplitDNS"
msgstr ""

#: ../../arch/proposals/hostdb.en.rst:93
msgid ""
"A resolver that directs requests to one of several resolvers. To emulate "
"current behavior these would be Nameserver instances."
msgstr ""

#: ../../arch/proposals/hostdb.en.rst:98
msgid "NameserverGroup"
msgstr ""

#: ../../arch/proposals/hostdb.en.rst:97
msgid ""
"A grouping mechanism for Nameserver instances that provides failover, round "
"robin, and ordering capabilities. It may be reasonable to merge this with "
"the SplitDNS resolver."
msgstr ""

#: ../../arch/proposals/hostdb.en.rst:101
msgid "HostFile"
msgstr ""

#: ../../arch/proposals/hostdb.en.rst:101
msgid "A resolver that uses a local file to resolve names."
msgstr ""

#: ../../arch/proposals/hostdb.en.rst:105
msgid "AddressCache"
msgstr ""

#: ../../arch/proposals/hostdb.en.rst:104
msgid ""
"A resolver that also has a cache for resolution results. It requires another"
" resolver instance to perform the actual resolution."
msgstr ""

#: ../../arch/proposals/hostdb.en.rst:109
msgid "Preloaded"
msgstr ""

#: ../../arch/proposals/hostdb.en.rst:108
msgid ""
"A resolver that can contain one or more explicitly set IP addresses which "
"are returned. When those are exhausted it falls back to another resolver."
msgstr ""

#: ../../arch/proposals/hostdb.en.rst:112
msgid "Configuration"
msgstr ""

#: ../../arch/proposals/hostdb.en.rst:114
msgid ""
"To configuration the resolution, each resolver would be assigned a tag. It "
"is not, however, sufficient to simply provide the list of resolver tags "
"because some resolvers require additional configuration. Unfortunately this "
"will likely require a separate configuration file outside of "
":file:`records.config`, although we would be able to remove "
":file:`splitdns.config`. In this case we would need chain start / end "
"markers around a list of resolver tags. Each tag would the be able to take "
"additional resolver configuration data. For instance, for a SplitDNS "
"resolver the nameservers."
msgstr ""

#: ../../arch/proposals/hostdb.en.rst:121
msgid "Examples"
msgstr ""

#: ../../arch/proposals/hostdb.en.rst:123
msgid ""
"Transparent operations would benefit from the *Preloaded* resolver. This "
"would be loaded with the origin host address provided by the client "
"connection. This could be done early in processing and then no more logic "
"would be required to skip DNS processing as it would happen without "
"additional action by the state machine. It would handle the problem of de "
"facto denial of service if an origin server becomes unavailable in that "
"configuration, as *Preloaded* would switch to alternate addresses "
"automatically."
msgstr ""

#: ../../arch/proposals/hostdb.en.rst:129
msgid ""
"Adding host file access would be easier as well, as it could be done in a "
"much more modular fashion and then added to the stack at configuration time."
" Whether such addresses were cached would be controlled by chain arrangement"
" rather yet more configuration knobs."
msgstr ""

#: ../../arch/proposals/hostdb.en.rst:133
msgid ""
"The default configuration would be *Preloaded* : *AddressCache* : "
"*Nameserver*."
msgstr ""

#: ../../arch/proposals/hostdb.en.rst:135
msgid ""
"In all cases the state machine makes requests against the request object to "
"get IP addresses as needed."
msgstr ""

#: ../../arch/proposals/hostdb.en.rst:138
msgid "Issues"
msgstr ""

#: ../../arch/proposals/hostdb.en.rst:141
msgid "Request object allocation"
msgstr ""

#: ../../arch/proposals/hostdb.en.rst:143
msgid ""
"The biggest hurdle is being able to unwind a resolver chain when a block is "
"encountered. There are some ways to deal with this."
msgstr ""

#: ../../arch/proposals/hostdb.en.rst:145
msgid ""
"1) Set a maximum resolver chain length and declare the request instance so "
"that there is storage for state for that many resolvers. If needed and "
"additional value of maximum storage per chain could be set as well. The "
"expected number of elements in a chain is expected to be limited, 10 would "
"likely be a reaosnable limit. If settable at source configuration time this "
"should be sufficient."
msgstr ""

#: ../../arch/proposals/hostdb.en.rst:150
msgid ""
"2) Embed class allocators in resolver chains and mark the top / outermost / "
"first resolver. The maximum state size for a resolution can be calculated "
"when the chain is created and then the top level resolver can use an "
"allocation pool to efficiently allocate request objects. This has an "
"advantage that with a wrapper class the request object can be passed along "
"cheaply. Whether that's an advantage in practice is unclear."
msgstr ""

#: ../../arch/proposals/hostdb.en.rst:156
msgid "Plugin resolvers"
msgstr ""

#: ../../arch/proposals/hostdb.en.rst:158
msgid ""
"If plugins can provide resolvers, how can these can integrated in to "
"existing resolver chains for use by the HTTP SM for instance?"
msgstr ""

#: ../../arch/proposals/hostdb.en.rst:162
msgid "Feedback"
msgstr ""

#: ../../arch/proposals/hostdb.en.rst:164
msgid ""
"It should be possible for a client to provide feedback about addresses "
"(e.g., the origin server at this address is not available). Not all "
"resolvers will handle feedback but some will and that must be possible."
msgstr ""

#: ../../arch/proposals/hostdb.en.rst:167
msgid ""
"Related to this is that caching resolvers (such as *AddressCache*) must be "
"able to iterator over all resolved addresses even if their client does not "
"ask for them. In effect they must background fill the address data."
msgstr ""
