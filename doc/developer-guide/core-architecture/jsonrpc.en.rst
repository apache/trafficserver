.. Licensed to the Apache Software Foundation (ASF) under one
   or more contributor license agreements.  See the NOTICE file
   distributed with this work for additional information
   regarding copyright ownership.  The ASF licenses this file
   to you under the Apache License, Version 2.0 (the
   "License"); you may not use this file except in compliance
   with the License.  You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing,
   software distributed under the License is distributed on an
   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   KIND, either express or implied.  See the License for the
   specific language governing permissions and limitations
   under the License.

.. include:: ../../common.defs

.. highlight:: cpp
.. default-domain:: cpp

.. _JSONRPC: https://www.jsonrpc.org/specification
.. _JSON: https://www.json.org/json-en.html


.. |str| replace:: ``string``
.. |arraynum| replace:: ``array[number]``
.. |arraystr| replace:: ``array[string]``
.. |num| replace:: *number*
.. |strnum| replace:: *string|number*
.. |object| replace:: *object*
.. |array| replace:: *array*
.. |optional| replace:: ``optional``

.. |arrayrecord| replace:: ``array[record]``
.. |arrayerror| replace:: ``array[errors]``

JSONRPC
*******

.. _jsonrpc-protocol:

JSONRPC 2.0 Protocol
====================

JSON-RPC is a stateless, light-weight remote procedure call (RPC) protocol. Primarily this specification defines several data structures
and the rules around their processing. It is transport agnostic in that the concepts can be used within the same process, over sockets,
over http, or in many various message passing environments. It uses JSON (RFC 4627) as data format.

Overview
========

.. note::
   
   Although most of the protocol specs are granted, we do have implemented some exceptions. All the modifications we have implemented will
   be documented.


There are a set  of mandatory fields that must be included in a `JSONRPC`_ message as well as some optional fields, all this is documented here,
you also can find this information in the `JSONRPC`_ link. 

.. _jsonrpc-request:

Requests
^^^^^^^^


* Mandatory fields.


   ============ ====== =======================================================================================
   Field        Type   Description
   ============ ====== =======================================================================================
   ``jsonrpc``  |str|  Protocol version. |TS| follows the version 2.0 so this field should be **only** ``2.0``
   ``method``   |str|  Method name that is intended to be invoked.
   ============ ====== =======================================================================================


* Optional parameters:



   * ``params``:
      
      A Structured value that holds the parameter values to be used during the invocation of the method. This member
      **may** be omitted. If passed then a parameters for the rpc call **must** be provided as a Structured value.
      Either by-position through an Array or by-name through an Object.

      #. ``by-position`` |array|

         params **must** be an ``array``, containing the values in the server expected order.


         .. code-block:: json

            {
               "params": [
                  "apache", "traffic", "server"
               ]
            }


         .. code-block:: json

            {
               "params": [
                  1, 2, 3, 4
               ]
            }


         .. code-block:: json

            {
               "params": [{
                  "name": "Apache"
               },{
                  "name": "Traffic"
               },{
                  "name": "Server"
               }]
            }

      #. ``by-name``: |object|

         Params **must** be an ``object``, with member names that match the server expected parameter names.
         The absence of expected names **may** result in an error being generated by the server. The names **must**
         match exactly, including case, to the method's expected parameters.

         .. code-block:: json

            {
               "params": {
                  "name": "Apache"
               }
            }

   * ``id``: |str|.

      An identifier established by the Client. If present, the request will be treated as a jsonrpc method and a
      response should be expected from the server. If it is not present, the server will treat the request as a
      notification and the client should not expect any response back from the server.
      *Although a |number| can  be specified here we will convert this internally to a |str|. The response will be a |str|.*


.. _jsonrpc-response:

Responses
^^^^^^^^^

Although each individual API call will describe the response details and some specific errors, in this section we will describe a high
level protocol errors, some defined by the `JSONRPC`_ specs and some by |TS|

The responses have the following structure:


   ============ ======== ==============================================
   Field        Type     Description
   ============ ======== ==============================================
   ``jsonrpc``  |strnum| A Number that indicates the error type that occurred.
   ``result``   ok       Result of the invoked operation. See `jsonrpc-result`_
   ``id``       |strnum| It will be the same as the value of the id member in the `jsonrpc-request`_
   ``error``    |object| Error object, it will be present in case of an error. See `jsonrpc-error`_
   ============ ======== ==============================================

Example 1.

   .. code-block:: json
   
      {
         "jsonrpc": "2.0",
         "result": ["hello", 5],
         "id": "9"
      }


Example 2.

   .. code-block:: json

      {
         "jsonrpc": "2.0",
         "error": {
            "code": -32600,
            "message": "Invalid Request"
         },
         "id": null
      }


.. _jsonrpc-result:

Result
""""""


* This member is required and will be present on success.
* This member will not exist if there was an error invoking the method.
* The value of this member is determined by the method invoked on the Server.
* The value of this member is determined by the method invoked on the Server.

In |TS| a RPC method that does not report any error and have nothing to send back to the client will use the following format to
express that the call was successfully handled and the command was executed.


.. _success_response:


Example:

   .. code-block:: json
      :emphasize-lines: 4

      {
         "id": "89fc5aea-0740-11eb-82c0-001fc69cc946",
         "jsonrpc": "2.0",
         "result": "success"
      }


.. _jsonrpc-error:

Errors
""""""

The specs define the error fields that the client must expect to be sent back from the Server in case of an error.


=============== ======== ==============================================
Field           Type     Description
=============== ======== ==============================================
``code``        |num|    A Number that indicates the error type that occurred.
``message``     |str|    A String providing a short description of the error.
``data``        |object| This is an optional field that contains additional error data. 
=============== ======== ==============================================

# data.

This can be used for nested error so |TS| can inform a detailed error.

   =============== ======== ==============================================
   Field           Type     Description
   =============== ======== ==============================================
   ``code``        |str|    The error code. Integer type.
   ``message``     |str|    The explanatory string for this error.
   =============== ======== ==============================================




Examples:

 # Fetch records from |TS|

   .. code-block:: json
      
      {  
         "jsonrpc": "2.0",
         "id": "ded7018e-0720-11eb-abe2-001fc69cc946",
         "result": {
            "recordList": [{
               "record": {
                  "record_name": "proxy.config.log.rolling_interval_sec",
                  "record_type": "1",
                  "version": "0",
                  "raw_stat_block": "0",
                  "order": "410",
                  "config_meta": {
                     "access_type": "0",
                     "update_status": "0",
                     "update_type": "1",
                     "checktype": "1",
                     "source": "3",
                     "check_expr": "^[0-9]+$"
                  },
                  "record_class": "1",
                  "overridable": "false",
                  "data_type": "INT",
                  "current_value": "86416",
                  "default_value": "86400"
               }
            }]
         }
      }


   # Getting errors from |TS|

      Parse Error.

      .. code-block:: json
      
         {"jsonrpc": "2.0", "error": {"code": -32700, "message": "Parse error"}}



      Invalid method invocation.


      .. code-block::json

         {
            "error": {
               "code": -32601,
               "message": "Method not found"
            },
            "id": "ded7018e-0720-11eb-abe2-001fc69cc946",
            "jsonrpc": "2.0"
         }


.. _rpc-error-code:

Internally we have this ``enum`` class that defines the errors that the server will inform in any case. Some of this errors are already
defined by the `JSONRPC`_ specs and some (``>=1``) are a Server definition.

.. class:: RPCErrorCode

   Defines the API error codes that will be used in case of any RPC error.

   .. enumerator:: INVALID_REQUEST  = -32600
   .. enumerator:: METHOD_NOT_FOUND = -32601
   .. enumerator:: INVALID_PARAMS   = -32602
   .. enumerator:: INTERNAL_ERROR   = -32603
   .. enumerator:: PARSE_ERROR      = -32700

      `JSONRPC`_ defined errors.

   .. enumerator:: InvalidVersion     = 1

      The passed version is invalid. **must** be 2.0

   .. enumerator:: InvalidVersionType = 2

      The passed version field type is invalid. **must** be a **string**

   .. enumerator:: MissingVersion = 3

      Version field is missing from the request. This field is mandatory.

   .. enumerator:: InvalidMethodType = 4

      The passed method field type is invalid. **must** be a **string**
   
   .. enumerator:: MissingMethod = 5

      Method field is missing from the request. This field is mandatory.

   .. enumerator:: InvalidParamType = 6

      The passed parameter field type is not valid. 

   .. enumerator:: InvalidIdType = 7

      The passed id field type is invalid.

   .. enumerator:: NullId = 8

      The passed if is ``null``

   .. enumerator:: ExecutionError = 9

      An error occured during the execution of the RPC call. This error is used as a generic High level error. The details details about
      the error, in most cases are specified in the ``data`` field.


.. information:

   According to the JSONRPC 2.0 specs, if you get an error, the ``result`` field will **not** be set.


Examples:

   # Server response to a drain request while the server is already draining.

      .. code-block:: json

         {
            "jsonrpc": "2.0",
            "id": "30700808-0cc4-11eb-b811-001fc69cc946",
            "error": {

               "code": 9,
               "message": "Error during execution",
               "data": [{

                  "code": 3000,
                  "message": "Server already draining."
                  }]
            
            }








RPC Architecture
================

In order to programs communicate with |TS| there is an RPC mechanism that exposes several client APIs.


Protocol
^^^^^^^^

The RPC mechanism implements a JSONRPC protocol `JSONRPC`_. You can refer to this section `jsonrpc-protocol`_ for more information.

Server
^^^^^^

IPC
"""

The current server implementation runs on an IPC Socket(Unix Domain Socket). This server implements an iterative server style. Configuration
for this particular server style can be found in the admin section :ref:`admnin-jsonrpc-configuration`. 
This implementation runs on a dedicated thread and as their style express this performs blocking calls to the registered handlers.


Using the JSONRPC mechanism
^^^^^^^^^^^^^^^^^^^^^^^^^^^

You can find a detailed information about how to use the current implementation and how to interact with |TS| in the admin section. :ref:`admnin-jsonrpc-configuration`. 


JSON Parsing
^^^^^^^^^^^^

The JSONRPC protocol uses libyamlcpp for parsing incoming and outgoing requests, this allow the server to accept either JSON or YAML
format messages which then will be parsed by the protocol implementation parser.
The protocol implementation knows the request format and will respond with the same, this means that if the server receives a JSON message
the outgoing response will be as well JSON, if YAML is the request format, then the response will be YAML as well. This eventually will allow clients to
feed configuration wrapped into a jsonrpc format message directly into |TS|.




Development Guide
=================


Development API
^^^^^^^^^^^^^^^


Handling Errors
^^^^^^^^^^^^^^^


Parsing incoming parameters
^^^^^^^^^^^^^^^^^^^^^^^^^^^


Send information back
^^^^^^^^^^^^^^^^^^^^^


Registering public handlers
^^^^^^^^^^^^^^^^^^^^^^^^^^^




