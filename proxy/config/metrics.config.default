-- Dynamic metrics.
-- This file is processed by Traffic Manager to evaluate dynamic metric definitions.

-- Lua API.
--
-- integer(NAME, FUNC), counter(NAME, FUNC), float(NAME, FUNC)
--    These global functions register a metric of the corresponding name. Each
--    registered metric will be periodically recalculated by evaluating the
--    given function.
--
--    The name of the metric is passed to evaluation function on each invocation.
--    This can be used to greate a unique key for persisting data in global tables.

--
-- HTTP Cache.
--
counter 'proxy.process.http.user_agent_total_request_bytes' [[
  return proxy.process.http.user_agent_request_document_total_size +
    proxy.process.http.user_agent_request_header_total_size
]]

counter 'proxy.process.http.user_agent_total_response_bytes' [[
  return proxy.process.http.user_agent_response_document_total_size +
    proxy.process.http.user_agent_response_header_total_size
]]

counter 'proxy.process.http.origin_server_total_request_bytes' [[
  return proxy.process.http.origin_server_request_document_total_size +
    proxy.process.http.origin_server_request_header_total_size
]]

counter 'proxy.process.http.origin_server_total_response_bytes' [[
  return proxy.process.http.origin_server_response_document_total_size +
    proxy.process.http.origin_server_response_header_total_size
]]

-- Add up the downstream (client <-> proxy) traffic volume.
counter 'proxy.process.user_agent_total_bytes' [[
  return proxy.process.http.user_agent_total_request_bytes +
    proxy.process.http.user_agent_total_response_bytes
]]

-- Add up the upstream (client <-> proxy) traffic volume.
counter 'proxy.process.origin_server_total_bytes' [[
  return proxy.process.http.origin_server_total_request_bytes +
    proxy.process.http.origin_server_total_response_bytes +
    proxy.process.http.parent_proxy_request_total_bytes +
    proxy.process.http.parent_proxy_response_total_bytes
]]

counter 'proxy.process.cache_total_hits' [[
  return proxy.process.http.cache_hit_fresh +
    proxy.process.http.cache_hit_revalidated +
    proxy.process.http.cache_hit_ims +
    proxy.process.http.cache_hit_stale_served
]]

counter 'proxy.process.cache_total_misses' [[
  return
    proxy.process.http.cache_miss_cold            +
    proxy.process.http.cache_miss_changed         +
    proxy.process.http.cache_miss_client_no_cache +
    proxy.process.http.cache_miss_ims             +
    proxy.process.http.cache_read_error
]]

integer 'proxy.process.current_server_connections' [[
  return
    proxy.process.http.current_server_connections +
    proxy.process.http.current_parent_proxy_connections
]]
