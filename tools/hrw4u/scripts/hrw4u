#!/usr/bin/env python3
#
#  Licensed to the Apache Software Foundation (ASF) under one
#  or more contributor license agreements.  See the NOTICE file
#  distributed with this work for additional information
#  regarding copyright ownership.  The ASF licenses this file
#  to you under the Apache License, Version 2.0 (the
#  "License"); you may not use this file except in compliance
#  with the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

import sys
import argparse

from antlr4 import FileStream, CommonTokenStream
from antlr4.error.ErrorStrategy import BailErrorStrategy

from hrw4u.hrw4uLexer import hrw4uLexer
from hrw4u.hrw4uParser import hrw4uParser
from hrw4u.visitor import HRW4UVisitor
from hrw4u.errors import ThrowingErrorListener, Hrw4uSyntaxError

if sys.version_info < (3, 10):
    raise RuntimeError("This program requires Python 3.10 or later.")


def fatal(message: str):
    print(message, file=sys.stderr)
    sys.exit(1)


def main():
    parser_arg = argparse.ArgumentParser(description="Process HRW4U input and produce output (AST or HRW).")
    parser_arg.add_argument("input_file", help="The input file to parse.")

    group = parser_arg.add_mutually_exclusive_group()
    group.add_argument("--ast", action="store_true", help="Produce the AST tree only from ANTLR.")
    group.add_argument("--hrw", action="store_true", help="Produce the HRW output (default).")
    parser_arg.add_argument("--debug", action="store_true", help="Enable debug output")

    args = parser_arg.parse_args()

    if not (args.ast or args.hrw):
        args.hrw = True

    try:
        input_stream = FileStream(args.input_file, encoding="utf-8")
    except Exception as e:
        fatal(f"{args.input_file}:0:0 - hrw4u error: cannot open file: {e}")

    lexer = hrw4uLexer(input_stream)
    lexer.removeErrorListeners()
    lexer.addErrorListener(ThrowingErrorListener(filename=args.input_file))
    token_stream = CommonTokenStream(lexer)

    parser_obj = hrw4uParser(token_stream)
    parser_obj.removeErrorListeners()
    parser_obj.addErrorListener(ThrowingErrorListener(filename=args.input_file))
    parser_obj.errorHandler = BailErrorStrategy()

    try:
        tree = parser_obj.program()
    except Hrw4uSyntaxError as e:
        fatal(str(e))
    except Exception as e:
        fatal(f"{args.input_file}:0:0 - hrw4u error: {e}")

    if args.ast:
        print(tree.toStringTree(recog=parser_obj))
    else:
        visitor = HRW4UVisitor(filename=args.input_file, debug=args.debug)
        try:
            result = visitor.visit(tree)
            print("\n".join(result))
        except Exception as e:
            fatal(str(e))


if __name__ == '__main__':
    main()
