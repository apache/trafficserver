# Custom log configuration.

# The log.* functions accept a table that supports the following fields:
#    Filename (string, required):
#    Format (string or format object, required):
#    Header (string, optional):
#    RollingEnabled (boolean, optional):
#    RollingIntervalSec (number, optional):
#    RollingOffsetHr (number, optional):
#    RollingSizeMb (number, optional):
#    Filters (array of filter objects, optional):
#    CollationHosts (array of strings, optional):
#      This parameter may be either a single string or an array of entries.
#      Entries may be strings or arrays of strings. A string specifies a
#      single collation host, which is equivalent to providing an array
#      containing a single string.
#
#      If multiple entries are given, multiple collation hosts are configured
#      and each log entry will be forwarded to every host.
#
#      If an entry is an array of strings, this defines a collation host
#      failover group. The first array entry is the primary collation host
#      and the remaining entries are attached as ordered failover hosts
#      that will be attempted if the primary host fails.
#
#      A single collation host with failover:
#        { {'logs-1.example.com:4567', 'logs-2.example.com:4567'} }
#
#      Multiple collation hosts:
#        {'logs-1.example.com:4567', 'logs-2.example.com:4567'}
#
#      Multiple collation hosts with some failover:
#        {'logs-1.example.com:4567', { 'logs-2.example.com:4567', 'logs-2a.example.com:4567'} }

# Predefined variables.
#
# log.roll.none (number)
#  RollingEnabled value to disable all log rolling.
#
# log.roll.time (number)
#  RollingEnabled value. Roll at a certain time frequency, specified
#  by RollingIntervalSec, and RollingOffsetHr.
#
# log.roll.size (number)
#  RollingEnabled value. Roll when the size exceeds RollingSizeMb.
#
# log.roll.both (number)
#  RollingEnabled value. Roll when either the specified rolling
#  time is reached or the specified file size is reached.
#
# log.roll.any (number)
#  RollingEnabled value. Roll the log file when the specified
#  rolling time is reached if the size of the file equals or exceeds
#  the specified size.
#
# log.protocol.http (number)
#  Server protocol constants for constructing %<etype> filters.

formats:
    # WebTrends Enhanced Log Format.
    #
    # The following is compatible with the WebTrends Enhanced Log Format.
    # If you want to generate a log that can be parsed by WebTrends
    # reporting tools, simply create a log that uses this format.
    - name: welf
      format: |-
          id=firewall time="%<cqtd> %<cqtt>" fw=%<phn> pri=6 proto=%<cqus> duration=%<ttmsf> sent=%<psql> rcvd=%<cqhl> src=%<chi> dst=%<shi> dstname=%<shn> user=%<caun> op=%<cqhm> arg="%<cqup>" result=%<pssc> ref="%<{Referer}cqh>" agent="%<{user-agent}cqh>" cache=%<crc>
    # Squid Log Format with seconds resolution timestamp.
    # The following is the squid format but with a seconds-only timestamp
    # (cqts) instead of a seconds and milliseconds timestamp (cqtq).
    - name: squid_seconds_only_timestamp
      format: '%<cqts> %<ttms> %<chi> %<crc>/%<pssc> %<psql> %<cqhm> %<cquc> %<caun> %<phr>/%<shn> %<psct>'

    # Squid Log Format.
    - name: squid
      format: '%<cqtq> %<ttms> %<chi> %<crc>/%<pssc> %<psql> %<cqhm> %<cquc> %<caun> %<phr>/%<shn> %<psct>'

    # Common Log Format.
    - name: common
      format: '%<chi> - %<caun> [%<cqtn>] "%<cqtx>" %<pssc> %<pscl>'

    # Extended Log Format.
    - name: 'extended'
      format: '%<chi> - %<caun> [%<cqtn>] "%<cqtx>" %<pssc> %<pscl> %<sssc> %<sscl> %<cqcl> %<pqcl> %<cqhl> %<pshl> %<pqhl> %<sshl> %<tts>'

     # Extended2 Log Formats
    - name: "extended2"
      format: '%<chi> - %<caun> [%<cqtn>] "%<cqtx>" %<pssc> %<pscl> %<sssc> %<sscl> %<cqcl> %<pqcl> %<cqhl> %<pshl> %<pqhl> %<sshl> %<tts> %<phr> %<cfsc> %<pfsc> %<crc>'

logs:
    - filename: squid
      format: squid
      mode: binary


# vim: set ft=yaml :
