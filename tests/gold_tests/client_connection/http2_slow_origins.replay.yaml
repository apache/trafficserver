#  Licensed to the Apache Software Foundation (ASF) under one
#  or more contributor license agreements.  See the NOTICE file
#  distributed with this work for additional information
#  regarding copyright ownership.  The ASF licenses this file
#  to you under the Apache License, Version 2.0 (the
#  "License"); you may not use this file except in compliance
#  with the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

# Test Notes:
# This test makes the server reply slowly over multiple origin connections,
# allowing client-side connections to build up. This allows us to test our
# proxy.config.net.per_client.max_connections_in feature. This test assumes that
# proxy.config.net.per_client.max_connections_in is configured to 3 and assumes
# the fourth connection will be aborted by ATS.
#
# Be aware that Proxy Verifier will perform each of these sessions in parallel,
# not in serial. Thus, while there are multiple server side delays across the
# sessions, the delays are not additive. The client side delays are additive
# though. The replay should take about 3 seconds to complete after the fifth
# transaction completes.

meta:
  version: "1.0"

sessions:

- protocol:
  - name: http
    version: 2
  - name: tls
    sni: test_sni
  - name: tcp
  - name: ip

  transactions:

  - client-request:
      headers:
        fields:
        - [ :method, GET ]
        - [ :scheme, https ]
        - [ :authority, www.example.com ]
        - [ :path, /some/path/first ]
        - [ X-Request, first-request ]
        - [ uuid, first-request ]

    proxy-request:
      headers:
        fields:
        - [ X-Request, {value: 'first-request', as: equal } ]

    server-response:
      # Delay for 2 seconds so that this origin connection will exist for 2 seconds.
      delay: 2s

      headers:
        fields:
        - [ :status, 200 ]
        - [ X-Response, first-response ]
      content:
        size: 36

    proxy-response:
      headers:
        fields:
        - [ :status, {value: '200', as: equal } ]
        - [ X-Response, {value: 'first-response', as: equal } ]

- protocol:
  - name: http
    version: 2
  - name: tls
    sni: test_sni
  - name: tcp
  - name: ip

  transactions:

  - client-request:
      headers:
        fields:
        - [ :method, GET ]
        - [ :scheme, https ]
        - [ :authority, www.example.com ]
        - [ :path, /some/path/second ]
        - [ X-Request, second-request ]
        - [ uuid, second-request ]

    proxy-request:
      headers:
        fields:
        - [ X-Request, {value: 'second-request', as: equal } ]

    server-response:
      # Delay for 2 seconds so that this origin connection will exist for 2 seconds.
      delay: 2s

      headers:
        fields:
        - [ :status, 200 ]
        - [ X-Response, second-response ]
      content:
        size: 36

    proxy-response:
      headers:
        fields:
        - [ :status, {value: '200', as: equal } ]
        - [ X-Response, {value: 'second-response', as: equal } ]

- protocol:
  - name: http
    version: 2
  - name: tls
    sni: test_sni
  - name: tcp
  - name: ip

  transactions:

  - client-request:
      headers:
        fields:
        - [ :method, GET ]
        - [ :scheme, https ]
        - [ :authority, www.example.com ]
        - [ :path, /some/path/third ]
        - [ X-Request, third-request ]
        - [ uuid, third-request ]

    proxy-request:
      headers:
        fields:
        - [ X-Request, {value: 'third-request', as: equal } ]

    server-response:
      # Delay for 2 seconds so that this origin connection will exist for 2 seconds.
      delay: 2s

      headers:
        fields:
        - [ :status, 200 ]
        - [ X-Response, third-response ]
      content:
        size: 36

    proxy-response:
      headers:
        fields:
        - [ :status, {value: '200', as: equal } ]
        - [ X-Response, {value: 'third-response', as: equal } ]


- protocol:
  - name: http
    version: 2
  - name: tls
    sni: test_sni
  - name: tcp
  - name: ip

  # Make sure this is the last attempted transaction by giving the above
  # three transactions, all executed in parallel, a one second head start.
  # This connection should be aborted.
  delay: 1s

  transactions:

  - client-request:
      headers:
        fields:
        - [ :method, GET ]
        - [ :scheme, https ]
        - [ :authority, www.example.com ]
        - [ :path, /some/path/fourth ]
        - [ X-Request, fourth-request ]
        - [ uuid, fourth-request ]

    # The server should never see this request since ATS will serve a 503
    # response due to the per_server.connection.max being hit.
    server-response:
      headers:
        fields:
        - [ :status, 200 ]
        - [ X-Response, fourth-response ]
      content:
        size: 36

# This one should work because the other transactions should complete.
# Note that this will delay after the previous 1s delay, so this is really
# a delay of 3s.
- protocol:
  - name: http
    version: 2
  - name: tls
    sni: test_sni
  - name: tcp
  - name: ip

  delay: 2s

  transactions:

  - client-request:
      headers:
        fields:
        - [ :method, GET ]
        - [ :scheme, https ]
        - [ :authority, www.example.com ]
        - [ :path, /some/path/fifth ]
        - [ X-Request, fifth-request ]
        - [ uuid, fifth-request ]

    proxy-request:
      headers:
        fields:
        - [ X-Request, {value: 'fifth-request', as: equal } ]

    server-response:
      headers:
        fields:
        - [ :status, 200 ]
        - [ X-Response, fifth-response ]

    proxy-response:
      headers:
        fields:
        - [ :status, {value: '200', as: equal } ]
        - [ X-Response, {value: 'fifth-response', as: equal } ]
