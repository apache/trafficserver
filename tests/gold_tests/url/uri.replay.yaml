#  Licensed to the Apache Software Foundation (ASF) under one
#  or more contributor license agreements.  See the NOTICE file
#  distributed with this work for additional information
#  regarding copyright ownership.  The ASF licenses this file
#  to you under the Apache License, Version 2.0 (the
#  "License"); you may not use this file except in compliance
#  with the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

#
# This replay file assumes that caching is enabled and
# proxy.config.http.cache.ignore_client_cc_max_age is set to 0 so that we can
# test max-age in the client requests.
#

meta:
  version: "1.0"

  blocks:
  - 200_ok_response: &200_ok_response
      server-response:
        status: 200
        reason: OK
        headers:
          fields:
          - [ Content-Length, 16 ]
          - [ Cache-Control, max-age=300 ]

sessions:
- transactions:

  # A simply path
  - all: { headers: { fields: [[ uuid, 1 ]]}}
    client-request:
      method: "GET"
      version: "1.1"
      scheme: "http"
      url: /index.html
      headers:
        fields:
        - [ Host, example.com ]

    <<: *200_ok_response

    proxy-response:
      status: 200

  # An initial // without an authority is not valid per RFC 3986 section-3.3,
  # but we have historically accepted it and will continue to do so.
  - all: { headers: { fields: [[ uuid, 2 ]]}}
    client-request:
      method: "GET"
      version: "1.1"
      scheme: "http"
      url: //index.html
      headers:
        fields:
        - [ Host, example.com ]

    <<: *200_ok_response

    proxy-response:
      status: 200

  # A '^' is an invalid path.
  - all: { headers: { fields: [[ uuid, 3 ]]}}
    client-request:
      method: "GET"
      version: "1.1"
      scheme: "http"
      url: ^
      headers:
        fields:
        - [ Host, example.com ]

    <<: *200_ok_response

    proxy-response:
      status: 400
