'''
This module contains all the bits and pieces needed to assemble
and manipulate a servicable mock origin server.
'''

#  Licensed to the Apache Software Foundation (ASF) under one
#  or more contributor license agreements.  See the NOTICE file
#  distributed with this work for additional information
#  regarding copyright ownership.  The ASF licenses this file
#  to you under the Apache License, Version 2.0 (the
#  "License"); you may not use this file except in compliance
#  with the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

import json
import socket
import ssl
import typing
import sys
import os
from ports import get_port
from autest.api import AddWhenFunction


def addMethod(self, testName, request_header, functionName):
    '''
    idk what this does, but I'm leaving it to avoid breaking things
    '''
    pass


def httpObject(self, header: str, data: str) -> typing.Dict[str, str]:
    '''
    creates the full request or response block using headers and message data
    '''
    return {'timestamp': "", "headers": header, "body": data}


def getHeaderFieldVal(request_header: typing.Dict[str, str], field: str) -> str:
    '''
    Extracts the value of the 'field' header from the full request header `request_header`
    '''
    requestline = request_header["headers"].split("\r\n")[0]
    requestline = requestline.split(" ")[1]
    field += ':'
    valField = request_header["headers"].split(field, 1)
    val = ""
    if len(valField) > 1:
        field_v = valField[1].split("\r\n", 1)
        if field_v:
            val = field_v[0].strip()
    return val



def addResponse(self,
                filename:        str,
                request_header:  typing.Dict[str, str],
                response_header: typing.Dict[str, str]):
    '''
    adds customized `response` with respect to `request_header`.
    '''
    requestline = request_header["headers"].split("\r\n")[0]
    host_ = ""
    path_ = ""
    if requestline:
        url_part = requestline.split(" ")
        if len(url_part) > 1:
            if url_part[1].startswith("http"):
                path_ = url_part[1].split("/", 2)[2]
                host_, path_ = path_.split("/", 1)
            else:
                path_ = url_part[1].split("/", 1)[1]

    kpath = ""
    argsList = []
    for keystr in self.Variables.lookup_key.split('}'):
        if keystr:
            if keystr == '{PATH':
                kpath += path_
            if keystr == '{HOST':
                kpath += host_
            else:
                argsList.append(keystr.replace("{%", ""))

    KeyList = []
    for argsL in argsList:
        field_val = getHeaderFieldVal(request_header, argsL)
        if field_val is not None:
            KeyList.append(field_val)

    txn = {
           "timestamp": "",
           "uuid": "".join(KeyList) + kpath,
           "request": request_header,
           "response": response_header
          }

    addTransactionToSession(txn, os.path.join(self.Variables.DataDir, filename))


def addTransactionToSession(txn: typing.Dict[str, str], JFile: str):
    '''
    adds transaction in json format to the specified file
    '''
    jsondata, jsonDir = None, os.path.dirname(JFile)

    if not os.path.exists(jsonDir):
        os.makedirs(jsonDir)

    if os.path.exists(JFile):
        jf = open(JFile, 'r+')
        jsondata = json.load(jf)
        jf.truncate(0)
        jf.seek(0)
    else:
        jf = open(JFile, 'x')

    if jsondata is None:
        jsondata = {
                    "version": '0.2',
                    "timestamp": "1234567890.098",
                    "encoding": "url_encoded",
                    "txns": [txn],
                   }
    else:
        jsondata["txns"].append(txn)

    jf.write(json.dumps(jsondata))
    jf.close()


def makeHeader(self, requestString: str, **kwargs) -> str:
    '''
    make headers with the key and values provided
    '''
    header = [requestString]
    header.extend("%s: %s" % item for item in kwargs.items())
    header.append('')

    return '\r\n'.join(header)


def uServerUpAndRunning(host: str, port: int, isSsl: bool, isIPv6: bool) -> bool:
    '''
    Checks that an ipv4/6 HTTP(S) server is listening at `host`:`port`.

    Raises a RuntimeError if a connection can be made, but the server isn't
    sending intelligible HTTP(S) responses.
    '''
    sock_family = socket.AF_INET6 if isIPv6 else socket.AF_INET

    with socket.socket(sock_family) as sock:
        if isSsl:
            sock = ssl.wrap_socket(sock)

        try:
            sock.connect((host, port))
        except ConnectionRefusedError:
            return False

        sock.sendall(b"GET /ruok HTTP/1.1\r\nHost: %s\r\n\r\n" % (host.encode(),))

        response=b''
        while True:
            output = sock.recv(4096)  # suggested bufsize from docs.python.org
            if len(output) <= 0:
                break
            else:
                response+=output

    expected_response=b"HTTP/1.1 200 OK\r\nConnection: close\r\nContent-Length: 4\r\n\r\nimok"
    if response == expected_response:
        return True
    raise RuntimeError('\n'.join([
            'Got invalid response from microserver:',
            '----',
            response.decode(),
            '----']))
AddWhenFunction(uServerUpAndRunning)


def MakeOriginServer(obj,
                     name:       str,
                     port:       int = None,
                     ip:         str = 'INADDR_LOOPBACK',
                     delay:      int = None,
                     use_ssl:    bool = False,
                     lookup_key: str = '{PATH}',
                     mode:       str = 'test',
                     options:    typing.Dict[str, str] = None) -> 'Process':
    '''
    Pretty self-explanitory, sets up a minimal mock origin server with the passed
    parameters.

    Returns a `Process` object that represents the started server.
    '''
    # to get the IP keywords in tools/lib
    sys.path.append(obj.Variables.AtsTestToolsDir)
    from lib import IPConstants

    if not options:
        options = {}

    server_path = os.path.join(obj.Variables.AtsTestToolsDir, 'microServer', 'uWServer.py')
    data_dir = os.path.join(obj.RunDirectory, name)
    # create Process
    p = obj.Processes.Process(name)

    if not port:
        port = get_port(p, "Port")

    ipaddr = IPConstants.getIP(ip)

    if not delay:
        delay = 0

    command="%s %s --data-dir %s --port %s --ip_address %s --delay %s -m test --ssl %s --lookupkey '%s' -m %s"
    # sometimes the absolute path to the interpreter cannot be determined, so this sets
    # up a reasonable fallback value in that case.
    command %= (sys.executable if sys.executable else 'python3',
                server_path,
                data_dir,
                port,
                ipaddr,
                delay,
                use_ssl,
                lookup_key,
                mode)

    command += " ".join("%s %s" % option for option in options.items())

    p.Command = command
    p.Setup.MakeDir(data_dir)
    p.Variables.DataDir = data_dir
    p.Variables.lookup_key = lookup_key
    AddMethodToInstance(p, addResponse)
    AddMethodToInstance(p, addTransactionToSession)

    # Set up health check.
    addResponse(p, "healthcheck.json", {
        "headers": "GET /ruok HTTP/1.1\r\nHost: {}\r\n\r\n".format(ipaddr),
        "timestamp": "1469733493.993",
        "body": ""
    }, {
        "headers": "HTTP/1.1 200 OK\r\nConnection: close\r\n\r\n",
        "timestamp": "1469733493.993",
        "body": "imok",
        "options": "skipHooks"
    })

    p.Ready = When.uServerUpAndRunning(ipaddr, port, use_ssl, IPConstants.isIPv6(ip))
    p.ReturnCode = Any(None, 0)

    return p


ExtendTest(MakeOriginServer, name="MakeOriginServer")
ExtendTest(MakeOriginServer, name="MakeOrigin")
