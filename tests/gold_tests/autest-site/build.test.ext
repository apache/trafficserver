'''
Build random code for running as part of a test
'''

#  Licensed to the Apache Software Foundation (ASF) under one
#  or more contributor license agreements.  See the NOTICE file
#  distributed with this work for additional information
#  regarding copyright ownership.  The ASF licenses this file
#  to you under the Apache License, Version 2.0 (the
#  "License"); you may not use this file except in compliance
#  with the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

import re
import typing
import autest.common.is_a as is_a


def Build(Test,
          target: str,
          sources: typing.Union[typing.Sequence[str], str],
          CPPFLAGS: str = '',
          LDFLAGS: str = '',
          LIBS: str = '',
          CC: str = None) -> 'TestRun':
    '''
    Builds c++ source files using compiler `CC`, compiler flags `CPPFLAGS`,
    linker flags `LDFLAGS` and libraries `LIBS`, outputting to `target`.

    If not specified, uses the system's default values for flags, libraries,
    and compiler.
    '''
    if is_a.OrderedSequence(sources):
        sources = " ".join(sources)
    tr = Test.AddTestRun("Build", "Build test files: {0}".format(sources))

    variables = Test.ComposeVariables()

    cc = CC if CC else variables.CXX

    tr.Processes.Default.Command = '{cc} -o {target} {cppflags} {sources} {ldflags} {libs}'.format(
        cppflags="{0} {1}".format(variables.CPPFLAGS, CPPFLAGS),
        ldflags="{0} {1}".format(variables.LDFLAGS, LDFLAGS),
        libs="{0} {1}".format(variables.LIBS, LIBS),
        target=target,
        sources=sources,
        cc=cc
    )
    tr.Processes.Default.ForceUseShell = True
    tr.ReturnCode = 0
    tr.Streams.All = Testers.ExcludesExpression(
        r'(\A|\s)error?\s?(([?!: ])|(\.\s))\D',
        "Build should not contain errors",
        reflags=re.IGNORECASE
    )

    return tr


ExtendTest(Build, name="Build")
