'''
'''
#  Licensed to the Apache Software Foundation (ASF) under one
#  or more contributor license agreements.  See the NOTICE file
#  distributed with this work for additional information
#  regarding copyright ownership.  The ASF licenses this file
#  to you under the Apache License, Version 2.0 (the
#  "License"); you may not use this file except in compliance
#  with the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

from __future__ import print_function
import os
from ports import get_port


def make_id(s):
    return s.replace(".", "_").replace('-', '_')


# this forms is for the global process define


def MakeATSProcess(obj, name, command='traffic_server', select_ports=True, enable_tls=False):
    #####################################
    # common locations

    # directory we will setup for the ATS to run under
    ts_dir = os.path.join(obj.RunDirectory, name)
    # common bin directory
    bin_dir = 'bin'

    # manually set up all directory for the test

    # configuration directory
    config_dir = os.path.join(ts_dir, 'config')

    # directory contains the html response templates
    template_dir = os.path.join(config_dir, 'body_factory')

    # contains plugins
    plugin_dir = os.path.join(ts_dir, 'plugin')

    # the log directory
    log_dir = os.path.join(ts_dir, 'log')

    # runtime dir
    runtime_dir = os.path.join(ts_dir, 'runtime')

    #ssl, storage & cache
    ssl_dir = os.path.join(ts_dir, 'ssl')
    storage_dir = os.path.join(ts_dir, 'storage')
    cache_dir = os.path.join(ts_dir, 'cache')

    # create process
    p = obj.Processes.Process(name, command)
    #p_debug = obj.Processes.Process("port-debug", "ss --listen --tcp --process")
    #p_debug.Env['PATH'] = "/usr/sbin" + os.pathsep + p.ComposeEnv()['PATH']
    # p.StartBefore(p_debug)
    # we want to have a few directories more fixed
    # this helps with debugging as location are common
    # we do this by overiding locations from the "layout"
    # used as part of build. This means loctaion such as
    # PROXY_CONFIG_BIN_PATH with alway be $root/bin
    # not something else such as bin64
    #####

    # set root for this test
    p.Env['TS_ROOT'] = ts_dir
    p.Setup.MakeDir(ts_dir)

    # set bin location

    p.Env['PROXY_CONFIG_BIN_PATH'] = bin_dir
    bin_path = os.path.join(ts_dir, bin_dir)
    p.Env['PATH'] = bin_path + os.pathsep + p.ComposeEnv()['PATH']
    p.Setup.Copy(p.Variables.BINDIR, bin_path, CopyLogic.SoftFiles)

    # setup config directory

    # copy all basic config files we need to get this to work
    cfg_dir = os.path.join(AUTEST_SITE_PATH, "min_cfg")

    p.Setup.MakeDir(config_dir)
    p.Setup.Chown(config_dir, "nobody", "nobody", ignore=True)
    # covers ubuntu's unprivileged group
    p.Setup.Chown(config_dir, "nobody", "nogroup", ignore=True)

    for f in os.listdir(cfg_dir):
        p.Setup.CopyAs(os.path.join(cfg_dir, f), config_dir)

    #########################################################
    # setup config directory
    p.Env['PROXY_CONFIG_CONFIG_DIR'] = config_dir
    p.Variables.CONFIGDIR = config_dir
    #########################################################
    # setup read-only data directory in config. Needed for response body
    # responses

    p.Env['PROXY_CONFIG_BODY_FACTORY_TEMPLATE_SETS_DIR'] = template_dir
    p.Variables.BODY_FACTORY_TEMPLATE_DIR = template_dir
    p.Setup.Copy(
        os.path.join(p.Variables.SYSCONFDIR, 'body_factory'), template_dir)

    #########################################################
    # setup cache directory
    p.Setup.MakeDir(cache_dir)
    p.Env['PROXY_CONFIG_CACHE_DIR'] = cache_dir
    p.Variables.CACHEDIR = cache_dir

    #########################################################
    # setup read-only data directory for plugins

    p.Env['PROXY_CONFIG_PLUGIN_PLUGIN_DIR'] = plugin_dir
    p.Setup.Copy(p.Variables.PLUGINDIR, plugin_dir, CopyLogic.SoftFiles)

    #########################################################
    # create subdirectories that need to exist (but are empty)
    # log directory has to be created with correct permissions
    p.Setup.MakeDir(log_dir)  # log directory has to be created
    p.Setup.Chown(log_dir, "nobody", "nobody", ignore=True)
    # covers ubuntu's unprivileged group
    p.Setup.Chown(log_dir, "nobody", "nogroup", ignore=True)

    # set env so traffic server uses correct locations
    p.Env['PROXY_CONFIG_LOG_LOGFILE_DIR'] = log_dir
    p.Variables.LOGDIR = log_dir

    # this is needed for cache and communication sockets
    # Below was to make shorter paths but the code in
    # set runtime directory(local state dir)
    p.Env['PROXY_CONFIG_LOCAL_STATE_DIR'] = runtime_dir
    p.Env['PROXY_CONFIG_HOSTDB_STORAGE_PATH'] = runtime_dir
    p.Variables.RUNTIMEDIR = runtime_dir
    p.Variables.LOCALSTATEDIR = runtime_dir

    p.Setup.MakeDir(runtime_dir)
    p.Setup.Chown(runtime_dir, "nobody", "nobody", ignore=True)
    # covers ubuntu's unprivileged group
    p.Setup.Chown(runtime_dir, "nobody", "nogroup", ignore=True)

    # will need this for traffic_manager is it runs
    p.Setup.MakeDir(os.path.join(config_dir, 'snapshots'))
    p.Env['PROXY_CONFIG_SNAPSHOT_DIR'] = os.path.join(config_dir, 'snapshots')
    ##########################################################
    # create subdirectories that need to exist (but are empty)
    # ssl directory has to be created for keeping certs and keys
    p.Setup.MakeDir(ssl_dir)
    p.Setup.Chown(ssl_dir, "nobody", "nobody", ignore=True)
    # covers ubuntu's unprivileged server
    p.Setup.Chown(ssl_dir, "nobody", "nogroup", ignore=True)

    # set env so traffic server uses correct locations
    p.Env['PROXY_CONFIG_SSL_DIR'] = ssl_dir
    p.Variables.SSLDir = ssl_dir
    AddMethodToInstance(p, addSSLfile)
    ########################################################
    # cache.db directory
    p.Setup.MakeDir(storage_dir)
    p.Setup.Chown(storage_dir, "nobody", "nobody", ignore=True)
    # covers ubuntu's unprivileged group
    p.Setup.Chown(storage_dir, "nobody", "nogroup", ignore=True)

    # set env so traffic server uses correct locations
    p.Env['PROXY_CONFIG_STORAGE_DIR'] = storage_dir
    p.Variables.STORAGEDIR = storage_dir
    #########################################################
    # define the basic file for a given test run
    # traffic.out ?? # cannot find it at the moment...
    # squid.log
    fname = "squid.log"
    tmpname = os.path.join(log_dir, fname)
    p.Disk.File(tmpname, id=make_id(fname))
    # error.log
    fname = "error.log"
    tmpname = os.path.join(log_dir, fname)
    p.Disk.File(tmpname, id=make_id(fname), exists=False)
    # diags.log
    fname = "diags.log"
    tmpname = os.path.join(log_dir, fname)
    p.Disk.File(tmpname, id=make_id(fname))
    # add this test back once we have network namespaces working again
    p.Disk.diags_log.Content = Testers.ExcludesExpression(
        "ERROR:", "diags.log should not contain errors")
    p.Disk.diags_log.Content += Testers.ExcludesExpression(
        "FATAL:", "diags.log should not contain errors")

    # config files
    def MakeConfigFile(self, fname):
        tmpname = os.path.join(config_dir, fname)
        return self.File(tmpname, id=make_id(fname), typename="ats:config")

    AddMethodToInstance(p.Disk, MakeConfigFile)

    # "Core" config files are pre-defined as variables.
    fname = "records.config"
    tmpname = os.path.join(config_dir, fname)
    p.Disk.File(tmpname, id=make_id(fname), typename="ats:config:records")

    fname = "cache.config"
    tmpname = os.path.join(config_dir, fname)
    p.Disk.File(tmpname, id=make_id(fname), typename="ats:config")

    fname = "hosting.config"
    tmpname = os.path.join(config_dir, fname)
    p.Disk.File(tmpname, id=make_id(fname), typename="ats:config")

    fname = "ip_allow.yaml"
    tmpname = os.path.join(config_dir, fname)
    p.Disk.File(tmpname, id=make_id(fname), typename="ats:config")

    # magic file that should probally not exist
    fname = "logging.yaml"
    tmpname = os.path.join(config_dir, fname)
    p.Disk.File(tmpname, id=make_id(fname), typename="ats:config")

    fname = "parent.config"
    tmpname = os.path.join(config_dir, fname)
    p.Disk.File(tmpname, id=make_id(fname), typename="ats:config")

    fname = "plugin.config"
    tmpname = os.path.join(config_dir, fname)
    p.Disk.File(tmpname, id=make_id(fname), typename="ats:config")

    fname = "remap.config"
    tmpname = os.path.join(config_dir, fname)
    p.Disk.File(tmpname, id=make_id(fname), typename="ats:config")

    fname = "socks.config"
    tmpname = os.path.join(config_dir, fname)
    p.Disk.File(tmpname, id=make_id(fname), typename="ats:config")

    fname = "splitdns.config"
    tmpname = os.path.join(config_dir, fname)
    p.Disk.File(tmpname, id=make_id(fname), typename="ats:config")

    fname = "ssl_multicert.config"
    tmpname = os.path.join(config_dir, fname)
    p.Disk.File(tmpname, id=make_id(fname), typename="ats:config")

    fname = "sni.yaml"
    tmpname = os.path.join(config_dir, fname)
    p.Disk.File(tmpname, id=make_id(fname), typename="ats:config")

    fname = "storage.config"
    tmpname = os.path.join(config_dir, fname)
    p.Disk.File(tmpname, id=make_id(fname), typename="ats:config")

    fname = "volume.config"
    tmpname = os.path.join(config_dir, fname)
    p.Disk.File(tmpname, id=make_id(fname), typename="ats:config")

    ##########################################################
    # set up default ports
    # get some ports  TODO make it so we can hold on to the socket
    if select_ports:

        # some system have a bug in which ipv4 and ipv6 share port space
        # Make two different ports to avoid this
        get_port(p, "port")
        get_port(p, "portv6")

        if enable_tls:
            get_port(p, "ssl_port")
            get_port(p, "ssl_portv6")
    else:
        p.Variables.port = 8080
        p.Variables.portv6 = 8080

        if enable_tls:
            p.Variables.ssl_port = 4443
            p.Variables.ssl_portv6 = 4444

    get_port(p, "manager_port")
    get_port(p, "admin_port")

    if enable_tls:
        p.Ready = When.PortsOpen([p.Variables.port, p.Variables.ssl_port])
    else:
        p.Ready = When.PortOpen(p.Variables.port)

    if select_ports:
        # default config
        port_str = "{port} {v6_port}:ipv6 ".format(port=p.Variables.port, v6_port=p.Variables.portv6)
        if enable_tls:
            port_str += "{ssl_port}:ssl {ssl_portv6}:ssl:ipv6".format(
                ssl_port=p.Variables.ssl_port, ssl_portv6=p.Variables.ssl_portv6)
        #p.Env['PROXY_CONFIG_HTTP_SERVER_PORTS'] = port_str
        p.Disk.records_config.update({
            'proxy.config.http.server_ports': port_str,
        })

    p.Env['PROXY_CONFIG_PROCESS_MANAGER_MGMT_PORT'] = str(
        p.Variables.manager_port)
    p.Env['PROXY_CONFIG_ADMIN_SYNTHETIC_PORT'] = str(p.Variables.admin_port)
    p.Env['PROXY_CONFIG_ADMIN_AUTOCONF_PORT'] = str(
        p.Variables.admin_port)  # support pre ATS 6.x

    if command == "traffic_manager":
        p.ReturnCode = 2
    else:
        p.ReturnCode = 0

    return p


##################################
# added to ats process object to help deal with config files


class Config(File):
    '''
    Class to represent a config file
    '''

    def __init__(self,
                 runable,
                 name,
                 exists=None,
                 size=None,
                 content_tester=None,
                 execute=False,
                 runtime=True,
                 content=None):
        super(Config, self).__init__(
            runable,
            name,
            exists=None,
            size=None,
            content_tester=None,
            execute=False,
            runtime=True)

        self.content = content
        self._added = False

    def AddLines(self, lines):
        for line in lines:
            self.AddLine(line)

    def _do_write(self, name):
        '''
        Write contents to disk
        '''
        host.WriteVerbosef('ats-config-file', "Writting out file {0}",
                           self.Name)
        if self.content is not None:
            with open(name, 'w') as f:
                f.write(self.content)
        return (True, "Appended file {0}".format(self.Name), "Success")

    def AddLine(self, line):
        if not self._added:
            self.WriteCustomOn(self._do_write)
            self._added = True
        if self.content is None:
            self.content = ""
        if not line.endswith('\n'):
            line += '\n'
        self.content += line


class RecordsConfig(Config, dict):
    '''
    Create a "dict" representation of records.config

    This can be accessed as a multi-level dictionary

    such as:
    rc['CONFIG']['proxy.config.log.hostname']
    '''

    reverse_kind_map = {
        str: 'STRING',
        int: 'INT',
        float: 'FLOAT',
    }

    line_template = 'CONFIG {name} {kind} {val}\n'

    def __init__(self,
                 runable,
                 name,
                 exists=None,
                 size=None,
                 content_tester=None,
                 execute=False,
                 runtime=True):
        super(RecordsConfig, self).__init__(
            runable,
            name,
            exists=None,
            size=None,
            content_tester=None,
            execute=False,
            runtime=True)
        self.WriteCustomOn(self._do_write)

    def _do_write(self, name):
        host.WriteVerbosef('ats-config-file', "Writting out file {0}", name)
        if len(self) > 0:
            with open(name, 'w') as f:
                for name, val in self.items():
                    f.write(
                        self.line_template.format(
                            name=name,
                            kind=self.reverse_kind_map[type(val)],
                            val=val)
                    )
        return (True,
                "Writing config file {0}".format(os.path.split(self.Name)[-1]),
                "Success")


##########################################################################


def addSSLfile(self, filename):
    self.Setup.CopyAs(filename, self.Variables.SSLDir)


RegisterFileType(Config, "ats:config")
RegisterFileType(RecordsConfig, "ats:config:records")
ExtendTest(MakeATSProcess, name="MakeATSProcess")
