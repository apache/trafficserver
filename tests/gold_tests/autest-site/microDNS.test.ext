'''
'''
#  Licensed to the Apache Software Foundation (ASF) under one
#  or more contributor license agreements.  See the NOTICE file
#  distributed with this work for additional information
#  regarding copyright ownership.  The ASF licenses this file
#  to you under the Apache License, Version 2.0 (the
#  "License"); you may not use this file except in compliance
#  with the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

from ports import get_port
import json


# AddRecord registers a list of ip address against hostname
def AddRecord(self,filename,hostname,list_ip_addr):

    record = dict()
    record[hostname] = list_ip_addr
    return record


#adds transaction in json format to the specified file
def addRecordtoDNS(self,filename,hostname,list_ip_addr=[]):
    jsondata=None
    JFile = os.path.join(self.Variables.DataDir, filename)
    rec = AddRecord(self,filename,hostname,list_ip_addr)
    if not os.path.exists(os.path.dirname(JFile)):
        os.makedirs(os.path.dirname(JFile))
    if os.path.exists(JFile):
        jf = open(JFile,'r')
        jsondata = json.load(jf)

    if jsondata == None:
        jsondata = dict()
        jsondata["mappings"]=list()
        jsondata["mappings"].append(rec)
        jsondata["otherwise"]=list()
        jsondata["otherwise"].append("127.0.0.1")
        jsondata["otherwise"].append("127.1.1.1")
    else:
        jsondata["mappings"].append(rec)
    with open(JFile,'w+') as jf:
        jf.write(json.dumps(jsondata))




def MakeDNServer(obj, name,filename,IP='127.0.0.1',port=False,rr=False,options={}):
    server_path= os.path.join(obj.Variables.AtsTestToolsDir,'microDNS/uDNS.py')
    data_dir = os.path.join(obj.RunDirectory, name)
    filepath = os.path.join(data_dir,filename)
    # create Process
    p = obj.Processes.Process(name)
    if (port == False):
        port=get_port(p,"Port")
    command = "python3 {3} {0} {1} {2}".format(IP, port,filepath,server_path)


    # create process
    p.Command = command
    p.Setup.MakeDir(data_dir)
    p.Variables.DataDir = data_dir
    p.ReturnCode = None
    p.Ready = When.PortOpen(port)
    AddMethodToInstance(p,AddRecord)
    AddMethodToInstance(p,addRecordtoDNS)

    return p

AddTestRunSet(MakeDNServer,name="MakeDNServer")
AddTestRunSet(MakeDNServer,name="MakeDNS")
