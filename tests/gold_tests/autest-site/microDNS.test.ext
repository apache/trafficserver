'''
This module defines tools for creating and configuring a minimal DNS server.
'''
#  Licensed to the Apache Software Foundation (ASF) under one
#  or more contributor license agreements.  See the NOTICE file
#  distributed with this work for additional information
#  regarding copyright ownership.  The ASF licenses this file
#  to you under the Apache License, Version 2.0 (the
#  "License"); you may not use this file except in compliance
#  with the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

import json
import os
import sys
import typing
from ports import get_port

def addRecords(self, records: typing.Dict[str, typing.List[str]]=None, jsonFile: str=None):
    '''
    Registers a dictionary `records` of DNS mappings with a microDNS server.

    dict in format {'domain': [IPs]}
    json file in the same mappings/otherwise format that uDNS takes
    '''
    records = records if records else {}

    # at this point the default file and fields should have been created
    if os.path.exists(self.Variables.zone_file):
        with open(self.Variables.zone_file) as f:
            jsondata = json.load(f)
    else:
        raise FileNotFoundError("default zone file doesn't exist, but it should.")

    for domain, ips in records.items():
        # Let's do this for the test writer's convenience.
        if not domain.endswith('.'):
            domain += '.'

        jsondata["mappings"].append({domain: ips})

    if jsonFile:
        jsonFile = os.path.join(self.TestDirectory, jsonFile)
        self.Setup.Copy(jsonFile, self.Variables.DataDir)

        with open(jsonFile) as f:
            entries = json.load(f)

        if entries and "mappings" in entries:
            # not copying over entries['otherwise']. dont see the need to
            jsondata["mappings"].extend(entries["mappings"])

    with open(self.Variables.zone_file, 'w+') as f:
        f.write(json.dumps(jsondata))


def MakeDNServer(obj,
                 name: str,
                 filename: str = "dns_file.json",
                 port: int = None,
                 ip: str = 'INADDR_LOOPBACK',
                 rr: bool = False,
                 default: typing.Dict[str, typing.List[str]] = None) -> 'Process':
    '''
    Starts up a uDNS server, optionally with some default records, and returns a
    'Process' object which refers to it.
    '''

    server_path = os.path.join(obj.Variables.AtsTestToolsDir, 'microDNS/uDNS.py')
    data_dir = os.path.join(obj.RunDirectory, name)
    filepath = os.path.join(data_dir, filename)
    obj.Variables.zone_file = filepath

    # provided file doesn't exist, so we create it and fill it in with the 'otherwise' values
    if not os.path.exists(os.path.dirname(filepath)):
        os.makedirs(os.path.dirname(filepath))

        jsondata = {'mappings': []}

        if default:
            jsondata['otherwise'] = default

        with open(filepath, 'w') as f:
            f.write(json.dumps(jsondata))

    # create Process
    p = obj.Processes.Process(name)
    if not port:
        port = get_port(p, "Port")

    # Sometimes the absolute interpreter path cannot be determined, so this sets
    # up a reasonable default.
    command = " ".join((sys.executable if sys.executable else 'python3',
                        server_path,
                        ip,
                        str(port),
                        filepath))

    if rr:
        command += " --rr"

    # create process
    p.Command = command
    p.Setup.MakeDir(data_dir)
    p.Variables.DataDir = data_dir
    p.ReturnCode = 0

    # to get the IP keywords in tools/lib
    sys.path.append(obj.Variables.AtsTestToolsDir)
    from lib import IPConstants

    if IPConstants.isIPv6(ip):
        p.Ready = When.PortOpenv6(port)
    else:
        p.Ready = When.PortOpenv4(port)

    AddMethodToInstance(p, addRecords)

    return p


ExtendTest(MakeDNServer, name="MakeDNServer")
ExtendTest(MakeDNServer, name="MakeDNS")
