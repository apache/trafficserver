'''
Tools to help with TestRun commands
'''
#  Licensed to the Apache Software Foundation (ASF) under one
#  or more contributor license agreements.  See the NOTICE file
#  distributed with this work for additional information
#  regarding copyright ownership.  The ASF licenses this file
#  to you under the Apache License, Version 2.0 (the
#  "License"); you may not use this file except in compliance
#  with the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

# Adds "curl" prefix to command argument, with possible curl flags
#
# example usage:
# cmd = '-vs -k https:127.0.0.1:{port}'.format(port = ts.Variables.port)
#
# tr = Test.AddTestRun()
# ps = tr.MakeCurlCommand(cmd)
# tr.Processes.Default.StartBefore(ts)
# ts.StartAfter(*ps)
# tr.StillRunningAfter = ts
#


def spawn_curl_commands(self, cmdstr, count, ts, retcode=0, use_default=True):
    ret = []

    if self.Variables.get("CurlUds", False):
        cmdstr = f'curl --unix-socket {ts.Variables.uds_path} ' + cmdstr
    else:
        cmdstr = 'curl ' + cmdstr
    if use_default:
        count = int(count) - 1
    for cnt in range(0, count):
        ret.append(self.Processes.Process(name="cmdline-{num}".format(num=cnt), cmdstr=cmdstr, returncode=retcode))
    if use_default:
        self.Processes.Default.Command = cmdstr
        self.Processes.Default.ReturnCode = retcode
        self.Processes.Default.StartBefore(*ret)
    return ret


def curl_command(self, cmd, ts=None, p=None):
    if p == None:
        p = self.Processes.Default
    if self.Variables.get("CurlUds", False):
        p.Command = f'curl --unix-socket {ts.Variables.uds_path} ' + cmd
    else:
        p.Command = 'curl ' + cmd
    return p


def curl_multiple_commands(self, cmd, ts=None):
    p = self.Processes.Default
    if self.Variables.get("CurlUds", False):
        p.Command = cmd.format(curl=f'curl --unix-socket {ts.Variables.uds_path}', curl_base='curl')
    else:
        p.Command = cmd.format(curl='curl', curl_base='curl')
    return p


ExtendTestRun(spawn_curl_commands, name="SpawnCurlCommands")
ExtendTestRun(curl_command, name="MakeCurlCommand")
ExtendTest(curl_command, name="MakeCurlCommand")
ExtendTestRun(curl_multiple_commands, name="MakeCurlCommandMulti")
ExtendTest(curl_multiple_commands, name="MakeCurlCommandMulti")
