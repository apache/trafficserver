#  Licensed to the Apache Software Foundation (ASF) under one
#  or more contributor license agreements.  See the NOTICE file
#  distributed with this work for additional information
#  regarding copyright ownership.  The ASF licenses this file
#  to you under the Apache License, Version 2.0 (the
#  "License"); you may not use this file except in compliance
#  with the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

# This replay file tests the stale response plugin when
# --force-stale-while-revalidate is configured.

sessions:

- transactions:

  - client-request:
      method: GET
      url: /pictures/stale.jpeg
      version: '1.1'
      headers:
        fields:
        - [ Host, www.example.com ]
        - [ Content-Type, image/jpeg ]
        - [ uuid, first-request ]

    # Note: only a 1 second max-age.
    server-response:
      status: 200
      reason: OK
      headers:
        fields:
        - [ Content-Type, image/jpeg ]
        - [ Content-Length, 100 ]
        - [ Connection, keep-alive ]
        # The low stale-while-revalidate should be overridden by
        # --force-stale-while-revalidate.
        - [ Cache-Control, max-age=1 stale-while-revalidate=1 ]
        - [ X-Response, first-response ]

    proxy-response:
      status: 200
      headers:
        fields:
        - [ Cache-Control, { value: "max-age=1 stale-while-revalidate=1", as: equal } ]
        - [ X-Response, { value: first-response, as: equal } ]

  - client-request:

      # Now age it out.
      delay: 3s

      method: GET
      url: /pictures/stale.jpeg
      version: '1.1'
      headers:
        fields:
        - [ Host, www.example.com ]
        - [ Content-Type, image/jpeg ]
        - [ uuid, second-request ]

    server-response:
      status: 200
      reason: OK
      headers:
        fields:
        - [ Content-Type, image/jpeg ]
        - [ Content-Length, 100 ]
        - [ Connection, keep-alive ]
        - [ Cache-Control, max-age=1 ]
        - [ X-Response, second-response ]

    # Ensure that the forced larger stale-while-revalidate is used and we
    # therefore get the cached response.
    proxy-response:
      status: 200
      headers:
        fields:
        - [ X-Response, { value: first-response, as: equal } ]
