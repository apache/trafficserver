#  Licensed to the Apache Software Foundation (ASF) under one
#  or more contributor license agreements.  See the NOTICE file
#  distributed with this work for additional information
#  regarding copyright ownership.  The ASF licenses this file
#  to you under the Apache License, Version 2.0 (the
#  "License"); you may not use this file except in compliance
#  with the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

meta:
  version: "1.0"
  blocks:
  - origin-server-response-200: &origin-server-response-200
      status: 200
      headers:
        fields:
          - [ Cache-Control, public;max-age=3600 ]
          - [ Content-Type, application/json ]
          - [ Content-Length, 1024 ]
        content:
          encoding: plain
          size: 1024

  - origin-server-response-206: &origin-server-response-206
      status: 206
      headers:
        fields:
          - [ Cache-Control, public;max-age=3600 ]
          - [ Content-Type, application/json ]
          - [ Content-Length, 10 ]
        content:
          encoding: plain
          size: 10

sessions:
- transactions:
  # Test Case 1
  #
  # ```
  # cache true
  # range-request ignore-range
  #```
  #
  # 1-1: Accept-Encoding only
  - client-request:
      method: "GET"
      version: "1.1"
      url: /cache-true-ignore-range/
      headers:
        fields:
          - [ uuid, 1-1]
          - [ Host, example.com ]
          - [ Accept-Encoding, gzip ]

    server-response:
      <<: *origin-server-response-200

    proxy-response:
      status: 200
      headers:
        fields:
          - [ Content-Encoding, { value: gzip, as: equal } ]
          - [ Content-Length, { value: 223, as: equal } ]

  # 1-2: Range only
  - client-request:
      method: "GET"
      version: "1.1"
      url: /cache-true-ignore-range/
      headers:
        fields:
          - [ uuid, 1-2]
          - [ Host, example.com ]
          - [ Range, 0-9 ]

    proxy-request:
      headers:
        fields:
          - [ Range, { as: present } ]

    server-response:
      <<: *origin-server-response-206

    proxy-response:
      status: 206
      headers:
        fields:
          - [ Content-Length, { value: 10, as: equal } ]

  # 1-3: Range and Accept-Encoding
  - client-request:
      method: "GET"
      version: "1.1"
      url: /cache-true-ignore-range/
      headers:
        fields:
          - [ uuid, 1-3]
          - [ Host, example.com ]
          - [ Range, 0-9 ]
          - [ Accept-Encoding, gzip ]

    proxy-request:
      headers:
        fields:
          - [ Range, { as: absent } ]

    server-response:
      <<: *origin-server-response-200

    proxy-response:
      status: 200
      headers:
        fields:
          - [ Content-Encoding, { value: gzip, as: equal } ]
          - [ Content-Length, { value: 223, as: equal } ]

  # Test Case 2
  #
  # ```
  # cache true
  # range-request no-compression
  #```
  #
  # 2-1: Range and Accept-Encoding
  - client-request:
      method: "GET"
      version: "1.1"
      url: /cache-true-no-compression/
      headers:
        fields:
          - [ uuid, 2-1]
          - [ Host, example.com ]
          - [ Range, 0-9 ]
          - [ Accept-Encoding, gzip ]

    proxy-request:
      headers:
        fields:
          - [ Range, { as: present } ]

    server-response:
      <<: *origin-server-response-206

    proxy-response:
      status: 206
      headers:
        fields:
          - [ Content-Length, { value: 10, as: equal } ]

