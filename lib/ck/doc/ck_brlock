.\"
.\" Copyright 2013 Samy Al Bahra.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"
.Dd July 26, 2013.
.Dt ck_brlock 3
.Sh NAME
.Nm ck_brlock_init ,
.Nm ck_brlock_write_lock ,
.Nm ck_brlock_write_unlock ,
.Nm ck_brlock_write_trylock ,
.Nm ck_brlock_read_register ,
.Nm ck_brlock_read_unregister ,
.Nm ck_brlock_read_lock ,
.Nm ck_brlock_read_trylock ,
.Nm ck_brlock_read_unlock
.Nd big-reader locks
.Sh LIBRARY
Concurrency Kit (libck, \-lck)
.Sh SYNOPSIS
.In ck_brlock.h
.Pp
.Dv ck_brlock_t brlock = CK_BRLOCK_INITIALIZER;
.Pp
.Dv ck_brlock_reader_t reader = CK_BRLOCK_READER_INITIALIZER;
.Pp
.Ft void
.Fn ck_brlock_init "ck_brlock_t *br"
.Ft void
.Fn ck_brlock_write_lock "ck_brlock_t *br"
.Ft void
.Fn ck_brlock_write_unlock "ck_brlock_t *br"
.Ft bool
.Fn ck_brlock_write_trylock "ck_brlock_t *br" "unsigned int factor"
.Ft void
.Fn ck_brlock_read_register "ck_brlock_t *br" "ck_brlock_reader_t *reader"
.Ft void
.Fn ck_brlock_read_unregister "ck_brlock_t *br" "ck_brlock_reader_t *reader"
.Ft void
.Fn ck_brlock_read_lock "ck_brlock_t *br" "ck_brlock_reader_t *reader"
.Ft bool
.Fn ck_brlock_read_trylock "ck_brlock_t *br" "ck_brlock_reader_t *reader" \
"unsigned int factor"
.Ft void
.Fn ck_brlock_read_unlock "ck_brlock_reader_t *reader"
.Sh DESCRIPTION
Big reader locks are distributed reader-writer locks with low latency constant time
reader acquisition (with respect to number of concurrent readers). On the other
hand, writer acquisitions are a relatively expensive O(n) operation. This is a write-biased
lock.
.Sh EXAMPLE
.Bd -literal -offset indent
static ck_brlock_t lock = CK_BRLOCK_INITIALIZER;
static __thread ck_brlock_reader_t reader;

static void
reader(void)
{

	/* Add our thread as a lock participant. */
	ck_brlock_read_register(&lock, &reader);

	for (;;) {
		ck_brlock_read_lock(&lock, &reader);
		/* Read-side critical section. */
		ck_brlock_read_unlock(&reader);

		if (ck_brlock_read_trylock(&lock, &reader, 1) == true) {
			/* Read-side critical section. */
			ck_brlock_read_unlock(&reader);
		}
	}

	return;
}

static void
writer(void)
{

	for (;;) {
		ck_brlock_write_lock(&lock);
		/* Write-side critical section. */
		ck_brlock_write_unlock(&lock);

		if (ck_brlock_write_trylock(&lock, 1) == true) {
			/* Write-side critical section. */
			ck_brlock_write_unlock(&lock);
		}
	}

	return;
}
.Ed
.Sh SEE ALSO
.Xr ck_bytelock 3 ,
.Xr ck_rwlock 3
.Pp
Additional information available at http://concurrencykit.org/
