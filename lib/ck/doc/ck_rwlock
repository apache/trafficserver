.\"
.\" Copyright 2013 Samy Al Bahra.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"
.Dd July 26, 2013.
.Dt ck_rwlock 3
.Sh NAME
.Nm ck_rwlock_init ,
.Nm ck_rwlock_write_lock ,
.Nm ck_rwlock_write_unlock ,
.Nm ck_rwlock_write_trylock ,
.Nm ck_rwlock_write_downgrade ,
.Nm ck_rwlock_locked_writer ,
.Nm ck_rwlock_read_lock ,
.Nm ck_rwlock_read_trylock ,
.Nm ck_rwlock_read_unlock ,
.Nm ck_rwlock_locked_reader ,
.Nm ck_rwlock_recursive_write_lock ,
.Nm ck_rwlock_recursive_write_trylock ,
.Nm ck_rwlock_recurisve_write_unlock ,
.Nm ck_rwlock_recursive_read_lock ,
.Nm ck_rwlock_recursive_read_trylock ,
.Nm ck_rwlock_recursive_read_unlock
.Nd centralized write-biased reader-writer locks
.Sh LIBRARY
Concurrency Kit (libck, \-lck)
.Sh SYNOPSIS
.In ck_rwlock.h
.Pp
.Dv ck_rwlock_t lock = CK_RWLOCK_INITIALIZER;
.Pp
.Ft void
.Fn ck_rwlock_init "ck_rwlock_t *lock"
.Ft void
.Fn ck_rwlock_write_lock "ck_rwlock_t *lock"
.Ft void
.Fn ck_rwlock_write_unlock "ck_rwlock_t *lock"
.Ft bool
.Fn ck_rwlock_write_trylock "ck_rwlock_t *lock"
.Ft bool
.Fn ck_rwlock_write_downgrade "ck_rwlock_t *lock"
.Ft bool
.Fn ck_rwlock_locked_writer "ck_rwlock_t *lock"
.Ft void
.Fn ck_rwlock_read_lock "ck_rwlock_t *lock"
.Ft bool
.Fn ck_rwlock_read_trylock "ck_rwlock_t *lock"
.Ft void
.Fn ck_rwlock_read_unlock "ck_rwlock_t *lock"
.Ft bool
.Fn ck_rwlock_locked_reader "ck_rwlock_t *lock"
.Pp
.Dv ck_rwlock_recursive_t lock = CK_RWLOCK_RECURSIVE_INITIALIZER;
.Pp
.Ft void
.Fn ck_rwlock_recursive_write_lock "ck_rwlock_recursive_t *lock" "unsigned int tid"
.Ft bool
.Fn ck_rwlock_recursive_write_trylock "ck_rwlock_recursive_t *lock" "unsigned int tid"
.Ft void
.Fn ck_rwlock_recurisve_write_unlock "ck_rwlock_recursive_t *lock"
.Ft void
.Fn ck_rwlock_recursive_read_lock "ck_rwlock_recursive_t *lock"
.Ft bool
.Fn ck_rwlock_recursive_read_trylock "ck_rwlock_recursive_t *lock"
.Ft void
.Fn ck_rwlock_recursive_read_unlock "ck_rwlock_recursive_t *lock"
.Sh DESCRIPTION
This is a centralized write-biased reader-writer lock. It
requires very little space overhead and has a low latency
fast path. Write-side recursion requires usage of ck_rwlock_recursive.
Read-side recursion is disallowed. The
.Fn ck_rwlock_write_downgrade
function degrades the caller's write-side acquisition to a read-side
acquisition without forfeit of current critical section.
.Sh EXAMPLE
.Bd -literal -offset indent
#include <ck_rwlock.h>

static ck_rwlock_t lock = CK_RWLOCK_INITIALIZER;

static void
reader(void)
{

	for (;;) {
		ck_rwlock_read_lock(&lock);
		/* Read-side critical section. */
		ck_rwlock_read_unlock(&lock);

		if (ck_rwlock_read_trylock(&lock) == true) {
			/* Read-side critical section. */
			ck_rwlock_read_unlock(&lock);
		}
	}

	return;
}

static void
writer(void)
{

	for (;;) {
		ck_rwlock_write_lock(&lock);
		/* Write-side critical section. */
		ck_rwlock_write_unlock(&lock);

		if (ck_rwlock_write_trylock(&lock, 1) == true) {
			/* Write-side critical section. */
			ck_rwlock_write_unlock(&lock);
		}
	}

	return;
}
.Ed
.Sh SEE ALSO
.Xr ck_brlock 3 ,
.Xr ck_elide 3
.Pp
Additional information available at http://concurrencykit.org/
