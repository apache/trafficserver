.\"
.\" Copyright 2014 Samy Al Bahra.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"
.Dd April 22, 2014.
.Dt ck_tflock 3
.Sh NAME
.Nm ck_tflock_ticket_init ,
.Nm ck_tflock_ticket_write_lock ,
.Nm ck_tflock_ticket_write_unlock ,
.Nm ck_tflock_ticket_read_lock ,
.Nm ck_tflock_ticket_read_unlock ,
.Nd centralized task-fair reader-writer locks
.Sh LIBRARY
Concurrency Kit (libck, \-lck)
.Sh SYNOPSIS
.In ck_tflock.h
.Pp
.Dv ck_tflock_ticket_t lock = CK_TFLOCK_TICKET_INITIALIZER;
.Pp
.Ft void
.Fn ck_tflock_ticket_init "ck_tflock_ticket_t *lock"
.Ft void
.Fn ck_tflock_ticket_write_lock "ck_tflock_ticket_t *lock"
.Ft void
.Fn ck_tflock_ticket_write_unlock "ck_tflock_ticket_t *lock"
.Ft void
.Fn ck_tflock_ticket_read_lock "ck_tflock_ticket_t *lock"
.Ft void
.Fn ck_tflock_ticket_read_unlock "ck_tflock_ticket_t *lock"
.Sh DESCRIPTION
This is a centralized task-fair reader-writer lock. It
requires little space overhead and has a low latency
fast path.
.Sh EXAMPLE
.Bd -literal -offset indent
#include <ck_tflock.h>

static ck_tflock_ticket_t lock = CK_TFLOCK_INITIALIZER;

static void
reader(void)
{

	for (;;) {
		ck_tflock_ticket_read_lock(&lock);
		/* Read-side critical section. */
		ck_tflock_ticket_read_unlock(&lock);
	}

	return;
}

static void
writer(void)
{

	for (;;) {
		ck_tflock_ticket_write_lock(&lock);
		/* Write-side critical section. */
		ck_tflock_ticket_write_unlock(&lock);
	}

	return;
}
.Ed
.Sh SEE ALSO
.Xr ck_brlock 3 ,
.Xr ck_rwlock 3 ,
.Xr ck_pflock 3 ,
.Xr ck_swlock 3
.Pp
Additional information available at http://concurrencykit.org/
