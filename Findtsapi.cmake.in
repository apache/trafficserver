#######################
#
#  Licensed to the Apache Software Foundation (ASF) under one or more contributor license
#  agreements.  See the NOTICE file distributed with this work for additional information regarding
#  copyright ownership.  The ASF licenses this file to you under the Apache License, Version 2.0
#  (the "License"); you may not use this file except in compliance with the License.  You may obtain
#  a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software distributed under the License
#  is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
#  or implied. See the License for the specific language governing permissions and limitations under
#  the License.
#
#######################

# Findtsapi.cmake
#
# This will define the following variables
#
#     tsapi_FOUND
#     tsapi_LIBRARY
#     tsapi_INCLUDE_DIRS
#
# and the following imported targets
#
#     ts::tsapi
#


set(tsapi_ROOT @CMAKE_INSTALL_PREFIX@ CACHE PATH "The base path for trafficserver")
find_library(tsapi_LIBRARY NAMES tsapi PATH_SUFFIXES lib lib/trafficserver REQUIRED)
find_path(tsapi_INCLUDE_DIR NAMES ts/ts.h)

mark_as_advanced(tsapi_FOUND tsapi_LIBRARY tsapi_LIBRARY tsapi_INCLUDE_DIR)

include(FindPackageHandleStandardArgs)
find_package_handle_standard_args(tsapi REQUIRED_VARS tsapi_LIBRARY tsapi_INCLUDE_DIR)

if(tsapi_FOUND)
  set(tsapi_INCLUDE_DIRS ${tsapi_INCLUDE_DIR})
endif()

if(tsapi_FOUND AND NOT TARGET ts::tsapi)
  add_library(ts::tsapi INTERFACE IMPORTED)
  target_include_directories(ts::tsapi INTERFACE ${tsapi_INCLUDE_DIRS})
  target_link_libraries(ts::tsapi INTERFACE ${tsapi_LIBRARY})
endif()

set(TRAFFICSERVER_PLUGIN_DIR @CMAKE_INSTALL_FULL_LIBEXECDIR@)
set(CMAKE_SHARED_LIBRARY_PREFIX "")

function(add_atsplugin name)
  add_library(${name} MODULE ${ARGN})
  set_target_properties(${name} PROPERTIES PREFIX "")
  set_target_properties(${name} PROPERTIES SUFFIX ".so")
  install(TARGETS ${name} DESTINATION ${TRAFFICSERVER_PLUGIN_DIR})
endfunction()

if(APPLE)
  set(CMAKE_MODULE_LINKER_FLAGS "-undefined dynamic_lookup")
endif()

function(verify_global_plugin target)
  add_test(NAME verify_${target}
    COMMAND ${tsapi_ROOT}/bin/traffic_server -C "verify_global_plugin $<TARGET_FILE:${target}>"
  )
endfunction()

function(verify_remap_plugin target)
  add_test(NAME verify_${target}
    COMMAND ${tsapi_ROOT}/bin/traffic_server -C "verify_remap_plugin $<TARGET_FILE:${target}>"
  )
endfunction()

